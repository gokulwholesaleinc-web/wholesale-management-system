// Business Intelligence â€“ Consolidated Page + Dashboard (single file)
import React, { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { AppLayout } from '@/layout/AppLayout';
import { Link } from 'wouter';
import {
  Card, CardContent, CardDescription, CardHeader, CardTitle
} from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import {
  AlertTriangle, TrendingUp, Users, DollarSign, Target, BarChart3,
  RefreshCw, Brain, Lightbulb
} from 'lucide-react';
import { ArrowLeft } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';

// ---------- Types ----------
interface ProfitMarginAnalysis {
  productProfitMargins: Array<{
    productId: number;
    productName: string;
    categoryName: string;
    cost: number;
    price: number;
    margin: number;
    marginPercentage: number;
    unitsSold: number;
    totalProfit: number;
    profitability: 'high' | 'medium' | 'low';
  }>;
  categoryProfitMargins: Array<{
    categoryName: string;
    totalRevenue: number;
    totalCost: number;
    totalProfit: number;
    marginPercentage: number;
    productCount: number;
  }>;
  overallMetrics: {
    totalRevenue: number;
    totalCost: number;
    totalProfit: number;
    overallMarginPercentage: number;
    topProfitableProducts: Array<{ name: string; profit: number }>;
    lowMarginProducts: Array<{ name: string; margin: number }>;
  };
  recommendations: string[];
}

interface CustomerLifetimeValue {
  customers: Array<{
    customerId: string;
    customerName: string;
    totalRevenue: number;
    orderCount: number;
    averageOrderValue: number;
    lifetimeValue: number;
    predictedLifetimeValue: number;
    customerSegment: 'high-value' | 'medium-value' | 'low-value' | 'at-risk';
    churnRisk: number;
  }>;
  segments: {
    highValue: { count: number; totalValue: number; averageValue: number };
    mediumValue: { count: number; totalValue: number; averageValue: number };
    lowValue: { count: number; totalValue: number; averageValue: number };
    atRisk: { count: number; totalValue: number; averageValue: number };
  };
  insights: string[];
  recommendations: string[];
}

interface CompetitorPricing {
  productComparisons: Array<{
    productId: number;
    productName: string;
    ourPrice: number;
    estimatedMarketPrice: number;
    pricePosition: 'below-market' | 'at-market' | 'above-market';
    competitiveAdvantage: number;
    recommendedPrice: number;
    potentialRevenueLift: number;
  }>;
  marketInsights: {
    averageMarketPosition: string;
    pricingOpportunities: number;
    riskProducts: number;
    optimizationPotential: number;
  };
  recommendations: string[];
}

interface SalesForecast {
  forecasts: Array<{
    period: string;
    predictedRevenue: number;
    predictedOrders: number;
    confidenceInterval: {
      low: number;
      high: number;
      confidence: number;
    };
    trends: string[];
  }>;
  seasonalPatterns: Array<{
    month: string;
    salesMultiplier: number;
    expectedRevenue: number;
  }>;
  opportunities: string[];
  accuracy: {
    modelConfidence: number;
    dataQuality: number;
  };
}

interface BIDashboard {
  overview: {
    totalRevenue: number;
    totalProfit: number;
    overallMargin: number;
    activeCustomers: number;
    averageCustomerValue: number;
    forecastConfidence: number;
  };
  keyInsights: string[];
  alerts: string[];
  quickStats: {
    profitMargins: {
      highMarginProducts: number;
      lowMarginProducts: number;
      topCategory: string;
    };
    customerValue: {
      highValueCustomers: number;
      atRiskCustomers: number;
      averageOrderValue: number;
    };
    pricing: {
      belowMarket: number;
      aboveMarket: number;
      optimizationOpportunities: number;
    };
    forecast: {
      nextMonthRevenue: number;
      confidence: number;
      trend: string;
    };
  };
}

interface AIRecommendationStats {
  timeframe: 'week' | 'month' | 'quarter';
  overall: {
    totalViewed: number;
    totalClicked: number;
    totalAddedToCart: number;
    totalPurchased: number;
    clickThroughRate: string;
    cartConversionRate: string;
    purchaseConversionRate: string;
  };
  byType: Array<{
    recommendationType: string;
    totalViewed: number;
    totalClicked: number;
    totalAddedToCart: number;
    totalPurchased: number;
    clickThroughRate: string;
    cartConversionRate: string;
    purchaseConversionRate: string;
  }>;
}

interface TopPerformingRecommendation {
  productId: number;
  productName: string;
  totalViewed: number;
  totalClicked: number;
  totalAddedToCart: number;
  totalPurchased: number;
  conversionRate: string;
  revenue: number;
}

// ---------- Tiny fetch helper ----------
async function apiGet<T>(url: string): Promise<T> {
  const res = await fetch(url, { credentials: 'include' });
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(`GET ${url} failed: ${res.status} ${res.statusText} ${text || ''}`.trim());
  }
  return res.json();
}

// ---------- Shared UI utils ----------
const formatCurrency = (amount: number) =>
  new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount ?? 0);

const formatPercentage = (value: number) => `${Number(value ?? 0).toFixed(1)}%`;

const getProfitabilityColor = (p: string) =>
  p === 'high' ? 'bg-green-100 text-green-800'
  : p === 'medium' ? 'bg-yellow-100 text-yellow-800'
  : p === 'low' ? 'bg-red-100 text-red-800'
  : 'bg-gray-100 text-gray-800';

const getSegmentColor = (s: string) =>
  s === 'high-value' ? 'bg-green-100 text-green-800'
  : s === 'medium-value' ? 'bg-blue-100 text-blue-800'
  : s === 'low-value' ? 'bg-yellow-100 text-yellow-800'
  : s === 'at-risk' ? 'bg-red-100 text-red-800'
  : 'bg-gray-100 text-gray-800';

const getPricePositionColor = (p: string) =>
  p === 'below-market' ? 'bg-blue-100 text-blue-800'
  : p === 'at-market' ? 'bg-green-100 text-green-800'
  : p === 'above-market' ? 'bg-red-100 text-red-800'
  : 'bg-gray-100 text-gray-800';

// ---------- Dashboard View (embedded component) ----------
function BIDashboardView() {
  const [activeTab, setActiveTab] = useState('overview');

  // Each query now has a queryFn:
  const dashQ = useQuery<BIDashboard>({
    queryKey: ['/api/admin/business-intelligence/dashboard'],
    enabled: activeTab === 'overview',
    queryFn: () => apiGet<BIDashboard>('/api/admin/business-intelligence/dashboard'),
  });

  const profitQ = useQuery<ProfitMarginAnalysis>({
    queryKey: ['/api/admin/business-intelligence/profit-margins'],
    enabled: activeTab === 'profit-margins',
    queryFn: () => apiGet<ProfitMarginAnalysis>('/api/admin/business-intelligence/profit-margins'),
  });

  const clvQ = useQuery<CustomerLifetimeValue>({
    queryKey: ['/api/admin/business-intelligence/customer-lifetime-value'],
    enabled: activeTab === 'customer-value',
    queryFn: () => apiGet<CustomerLifetimeValue>('/api/admin/business-intelligence/customer-lifetime-value'),
  });

  const pricingQ = useQuery<CompetitorPricing>({
    queryKey: ['/api/admin/business-intelligence/competitor-pricing'],
    enabled: activeTab === 'pricing',
    queryFn: () => apiGet<CompetitorPricing>('/api/admin/business-intelligence/competitor-pricing'),
  });

  const forecastQ = useQuery<SalesForecast>({
    queryKey: ['/api/admin/business-intelligence/sales-forecast'],
    enabled: activeTab === 'forecast',
    queryFn: () => apiGet<SalesForecast>('/api/admin/business-intelligence/sales-forecast'),
  });

  const aiStatsQ = useQuery<AIRecommendationStats>({
    queryKey: ['/api/admin/ai-recommendations/stats', 'month'],
    enabled: activeTab === 'ai-insights',
    queryFn: () => apiGet<AIRecommendationStats>('/api/admin/ai-recommendations/stats?timeframe=month'),
  });

  const topAIQ = useQuery<TopPerformingRecommendation[]>({
    queryKey: ['/api/admin/ai-recommendations/top-performing'],
    enabled: activeTab === 'ai-insights',
    queryFn: () => apiGet<TopPerformingRecommendation[]>('/api/admin/ai-recommendations/top-performing'),
  });

  const handleRefresh = () => {
    switch (activeTab) {
      case 'overview': dashQ.refetch(); break;
      case 'profit-margins': profitQ.refetch(); break;
      case 'customer-value': clvQ.refetch(); break;
      case 'pricing': pricingQ.refetch(); break;
      case 'forecast': forecastQ.refetch(); break;
      case 'ai-insights': aiStatsQ.refetch(); topAIQ.refetch(); break;
    }
  };

  // helper renderers for loading / error
  const Loading = (
    <div className="flex items-center justify-center h-64">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
    </div>
  );
  const ErrorMsg = (e?: unknown) => (
    <div className="text-center py-10">
      <p className="text-sm text-red-600">
        {(e as Error)?.message || 'Something went wrong loading this section.'}
      </p>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Business Intelligence Dashboard</h1>
          <p className="text-muted-foreground">Advanced analytics and insights for data-driven decision making</p>
        </div>
        <Button onClick={handleRefresh} variant="outline" size="sm">
          <RefreshCw className="h-4 w-4 mr-2" />
          Refresh
        </Button>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="profit-margins">Profit Margins</TabsTrigger>
          <TabsTrigger value="customer-value">Customer Value</TabsTrigger>
          <TabsTrigger value="pricing">Pricing Intelligence</TabsTrigger>
          <TabsTrigger value="forecast">Sales Forecast</TabsTrigger>
          <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
        </TabsList>

        {/* Overview */}
        <TabsContent value="overview" className="space-y-4">
          {dashQ.isLoading ? Loading : dashQ.isError ? ErrorMsg(dashQ.error) : dashQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
                    <DollarSign className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatCurrency(dashQ.data.overview.totalRevenue)}</div>
                    <p className="text-xs text-muted-foreground">
                      {formatPercentage(dashQ.data.overview.overallMargin)} margin
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Profit</CardTitle>
                    <TrendingUp className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatCurrency(dashQ.data.overview.totalProfit)}</div>
                    <p className="text-xs text-muted-foreground">
                      From {dashQ.data.overview.activeCustomers} customers
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Avg Customer Value</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatCurrency(dashQ.data.overview.averageCustomerValue)}</div>
                    <p className="text-xs text-muted-foreground">Lifetime value per customer</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Forecast Confidence</CardTitle>
                    <Target className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatPercentage(dashQ.data.overview.forecastConfidence)}</div>
                    <p className="text-xs text-muted-foreground">Model accuracy</p>
                  </CardContent>
                </Card>
              </div>

              {dashQ.data.alerts?.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <AlertTriangle className="h-5 w-5 text-orange-500" />
                      Action Required
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {dashQ.data.alerts.map((a, i) => (
                        <div key={i} className="flex items-center gap-2 p-2 bg-orange-50 rounded">
                          <AlertTriangle className="h-4 w-4 text-orange-500" />
                          <span className="text-sm">{a}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              <Card>
                <CardHeader>
                  <CardTitle>Key Business Insights</CardTitle>
                  <CardDescription>AI-powered recommendations for business growth</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {dashQ.data.keyInsights?.map((insight, i) => (
                      <div key={i} className="flex items-start gap-2 p-2 bg-blue-50 rounded">
                        <BarChart3 className="h-4 w-4 text-blue-500 mt-0.5" />
                        <span className="text-sm">{insight}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <Card>
                  <CardHeader><CardTitle className="text-sm">Profit Margins</CardTitle></CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">High Margin Products</span>
                      <Badge variant="secondary">{dashQ.data.quickStats.profitMargins.highMarginProducts}</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Low Margin Products</span>
                      <Badge variant="destructive">{dashQ.data.quickStats.profitMargins.lowMarginProducts}</Badge>
                    </div>
                    <div className="text-xs text-muted-foreground">
                      Top Category: {dashQ.data.quickStats.profitMargins.topCategory}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader><CardTitle className="text-sm">Customer Value</CardTitle></CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">High Value</span>
                      <Badge variant="secondary">{dashQ.data.quickStats.customerValue.highValueCustomers}</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">At Risk</span>
                      <Badge variant="destructive">{dashQ.data.quickStats.customerValue.atRiskCustomers}</Badge>
                    </div>
                    <div className="text-xs text-muted-foreground">
                      AOV: {formatCurrency(dashQ.data.quickStats.customerValue.averageOrderValue)}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader><CardTitle className="text-sm">Pricing Position</CardTitle></CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm">Below Market</span>
                      <Badge variant="secondary">{dashQ.data.quickStats.pricing.belowMarket}</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm">Above Market</span>
                      <Badge variant="destructive">{dashQ.data.quickStats.pricing.aboveMarket}</Badge>
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {dashQ.data.quickStats.pricing.optimizationOpportunities} optimization opportunities
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader><CardTitle className="text-sm">Sales Forecast</CardTitle></CardHeader>
                  <CardContent className="space-y-2">
                    <div className="text-lg font-semibold">
                      {formatCurrency(dashQ.data.quickStats.forecast.nextMonthRevenue)}
                    </div>
                    <Progress value={dashQ.data.quickStats.forecast.confidence} className="h-2" />
                    <div className="text-xs text-muted-foreground">
                      {formatPercentage(dashQ.data.quickStats.forecast.confidence)} confidence â€¢ {dashQ.data.quickStats.forecast.trend}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : (
            <div className="text-center py-8">
              <p className="text-muted-foreground">No dashboard data available</p>
            </div>
          )}
        </TabsContent>

        {/* Profit Margins */}
        <TabsContent value="profit-margins" className="space-y-4">
          {profitQ.isLoading ? Loading : profitQ.isError ? ErrorMsg(profitQ.error) : profitQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-3">
                <Card><CardHeader><CardTitle>Total Revenue</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{formatCurrency(profitQ.data.overallMetrics.totalRevenue)}</div></CardContent></Card>
                <Card><CardHeader><CardTitle>Total Profit</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{formatCurrency(profitQ.data.overallMetrics.totalProfit)}</div></CardContent></Card>
                <Card><CardHeader><CardTitle>Overall Margin</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{formatPercentage(profitQ.data.overallMetrics.overallMarginPercentage)}</div></CardContent></Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Product Profit Analysis</CardTitle>
                  <CardDescription>Top performing products by profitability</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {profitQ.data.productProfitMargins.slice(0, 10).map((p) => (
                      <div key={p.productId} className="flex items-center justify-between p-3 border rounded">
                        <div className="flex-1">
                          <div className="font-medium">{p.productName}</div>
                          <div className="text-sm text-muted-foreground">{p.categoryName}</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(p.price)}</div>
                          <div className="text-sm text-muted-foreground">{p.unitsSold} units sold</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(p.totalProfit)}</div>
                          <div className="text-sm text-muted-foreground">total profit</div>
                        </div>
                        <div className="text-right">
                          <div className="font-medium">{formatPercentage(p.marginPercentage)}</div>
                          <Badge className={getProfitabilityColor(p.profitability)}>{p.profitability}</Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader><CardTitle>Profit Optimization Recommendations</CardTitle></CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {profitQ.data.recommendations.map((r, i) => (
                      <div key={i} className="flex items-start gap-2 p-2 bg-green-50 rounded">
                        <TrendingUp className="h-4 w-4 text-green-500 mt-0.5" />
                        <span className="text-sm">{r}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          ) : <div className="text-center py-8"><p className="text-muted-foreground">No profit margin data available</p></div>}
        </TabsContent>

        {/* Customer Value */}
        <TabsContent value="customer-value" className="space-y-4">
          {clvQ.isLoading ? Loading : clvQ.isError ? ErrorMsg(clvQ.error) : clvQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-4">
                <Card><CardHeader><CardTitle className="text-sm">High Value</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{clvQ.data.segments.highValue.count}</div>
                    <p className="text-xs text-muted-foreground">Avg: {formatCurrency(clvQ.data.segments.highValue.averageValue)}</p></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Medium Value</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{clvQ.data.segments.mediumValue.count}</div>
                    <p className="text-xs text-muted-foreground">Avg: {formatCurrency(clvQ.data.segments.mediumValue.averageValue)}</p></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Low Value</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{clvQ.data.segments.lowValue.count}</div>
                    <p className="text-xs text-muted-foreground">Avg: {formatCurrency(clvQ.data.segments.lowValue.averageValue)}</p></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">At Risk</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{clvQ.data.segments.atRisk.count}</div>
                    <p className="text-xs text-muted-foreground">Avg: {formatCurrency(clvQ.data.segments.atRisk.averageValue)}</p></CardContent></Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Customer Lifetime Value Analysis</CardTitle>
                  <CardDescription>Top customers by lifetime value and churn risk</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {clvQ.data.customers.slice(0, 15).map((c) => (
                      <div key={c.customerId} className="flex items-center justify-between p-3 border rounded">
                        <div className="flex-1">
                          <div className="font-medium">{c.customerName}</div>
                          <div className="text-sm text-muted-foreground">{c.orderCount} orders â€¢ {formatCurrency(c.averageOrderValue)} AOV</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(c.lifetimeValue)}</div>
                          <div className="text-sm text-muted-foreground">current LTV</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(c.predictedLifetimeValue)}</div>
                          <div className="text-sm text-muted-foreground">predicted LTV</div>
                        </div>
                        <div className="text-right">
                          <Badge className={getSegmentColor(c.customerSegment)}>{c.customerSegment}</Badge>
                          {c.churnRisk > 50 && <div className="text-xs text-red-600 mt-1">{c.churnRisk}% churn risk</div>}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader><CardTitle>Customer Insights</CardTitle></CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {clvQ.data.insights.map((i, idx) => <div key={idx} className="text-sm p-2 bg-blue-50 rounded">{i}</div>)}
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader><CardTitle>Retention Recommendations</CardTitle></CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {clvQ.data.recommendations.map((r, idx) => (
                        <div key={idx} className="flex items-start gap-2 p-2 bg-green-50 rounded">
                          <Users className="h-4 w-4 text-green-500 mt-0.5" />
                          <span className="text-sm">{r}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : <div className="text-center py-8"><p className="text-muted-foreground">No customer lifetime value data available</p></div>}
        </TabsContent>

        {/* Pricing */}
        <TabsContent value="pricing" className="space-y-4">
          {pricingQ.isLoading ? Loading : pricingQ.isError ? ErrorMsg(pricingQ.error) : pricingQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-4">
                <Card><CardHeader><CardTitle className="text-sm">Market Position</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold capitalize">{pricingQ.data.marketInsights.averageMarketPosition}</div></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Pricing Opportunities</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{pricingQ.data.marketInsights.pricingOpportunities}</div>
                    <p className="text-xs text-muted-foreground">products to optimize</p></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Risk Products</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{pricingQ.data.marketInsights.riskProducts}</div>
                    <p className="text-xs text-muted-foreground">may be overpriced</p></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Optimization Potential</CardTitle></CardHeader>
                  <CardContent><div className="text-2xl font-bold">{formatPercentage(pricingQ.data.marketInsights.optimizationPotential)}</div>
                    <p className="text-xs text-muted-foreground">avg revenue lift</p></CardContent></Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Competitive Pricing Analysis</CardTitle>
                  <CardDescription>How your prices compare to estimated market rates</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {pricingQ.data.productComparisons.slice(0, 15).map((p) => (
                      <div key={p.productId} className="flex items-center justify-between p-3 border rounded">
                        <div className="flex-1">
                          <div className="font-medium">{p.productName}</div>
                          <Badge className={getPricePositionColor(p.pricePosition)}>{p.pricePosition}</Badge>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(p.ourPrice)}</div>
                          <div className="text-sm text-muted-foreground">our price</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(p.estimatedMarketPrice)}</div>
                          <div className="text-sm text-muted-foreground">market est.</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(p.recommendedPrice)}</div>
                          <div className="text-sm text-muted-foreground">recommended</div>
                        </div>
                        <div className="text-right">
                          <div className={`font-medium ${p.potentialRevenueLift > 0 ? 'text-green-600' : 'text-red-600'}`}>
                            {p.potentialRevenueLift > 0 ? '+' : ''}{formatPercentage(p.potentialRevenueLift)}
                          </div>
                          <div className="text-sm text-muted-foreground">potential lift</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader><CardTitle>Pricing Strategy Recommendations</CardTitle></CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {pricingQ.data.recommendations.map((r, i) => (
                      <div key={i} className="flex items-start gap-2 p-2 bg-blue-50 rounded">
                        <DollarSign className="h-4 w-4 text-blue-500 mt-0.5" />
                        <span className="text-sm">{r}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          ) : <div className="text-center py-8"><p className="text-muted-foreground">No pricing intelligence data available</p></div>}
        </TabsContent>

        {/* Forecast */}
        <TabsContent value="forecast" className="space-y-4">
          {forecastQ.isLoading ? Loading : forecastQ.isError ? ErrorMsg(forecastQ.error) : forecastQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader><CardTitle>Model Confidence</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatPercentage(forecastQ.data.accuracy.modelConfidence)}</div>
                    <Progress value={forecastQ.data.accuracy.modelConfidence} className="mt-2" />
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader><CardTitle>Data Quality</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{formatPercentage(forecastQ.data.accuracy.dataQuality)}</div>
                    <Progress value={forecastQ.data.accuracy.dataQuality} className="mt-2" />
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Sales Forecast</CardTitle>
                  <CardDescription>Predicted revenue and order volume for upcoming periods</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {forecastQ.data.forecasts.map((f, i) => (
                      <div key={i} className="flex items-center justify-between p-3 border rounded">
                        <div className="flex-1">
                          <div className="font-medium">{f.period}</div>
                          <div className="text-sm text-muted-foreground">{formatPercentage(f.confidenceInterval.confidence)} confidence</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{formatCurrency(f.predictedRevenue)}</div>
                          <div className="text-sm text-muted-foreground">predicted revenue</div>
                        </div>
                        <div className="text-right mr-4">
                          <div className="font-medium">{f.predictedOrders}</div>
                          <div className="text-sm text-muted-foreground">predicted orders</div>
                        </div>
                        <div className="text-right">
                          <div className="text-sm">{formatCurrency(f.confidenceInterval.low)} - {formatCurrency(f.confidenceInterval.high)}</div>
                          <div className="text-xs text-muted-foreground">confidence range</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Seasonal Sales Patterns</CardTitle>
                  <CardDescription>Expected sales multipliers by month</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-2 md:grid-cols-6">
                    {forecastQ.data.seasonalPatterns.map((p, i) => (
                      <div key={i} className="text-center p-2 border rounded">
                        <div className="font-medium text-sm">{p.month.slice(0,3)}</div>
                        <div className="text-lg font-bold">{p.salesMultiplier.toFixed(2)}x</div>
                        <div className="text-xs text-muted-foreground">{formatCurrency(p.expectedRevenue)}</div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader><CardTitle>Growth Opportunities</CardTitle></CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {forecastQ.data.opportunities.map((o, i) => (
                      <div key={i} className="flex items-start gap-2 p-2 bg-green-50 rounded">
                        <TrendingUp className="h-4 w-4 text-green-500 mt-0.5" />
                        <span className="text-sm">{o}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          ) : <div className="text-center py-8"><p className="text-muted-foreground">No sales forecast data available</p></div>}
        </TabsContent>

        {/* AI Insights */}
        <TabsContent value="ai-insights" className="space-y-4">
          {aiStatsQ.isLoading || topAIQ.isLoading ? Loading :
           aiStatsQ.isError ? ErrorMsg(aiStatsQ.error) :
           topAIQ.isError ? ErrorMsg(topAIQ.error) :
           aiStatsQ.data ? (
            <>
              <div className="grid gap-4 md:grid-cols-4">
                <Card><CardHeader><CardTitle className="text-sm">Total AI Views</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{aiStatsQ.data.overall?.totalViewed || 0}</div>
                    <p className="text-xs text-muted-foreground">recommendations shown</p>
                  </CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Click-Through Rate</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{aiStatsQ.data.overall?.clickThroughRate || '0%'}</div>
                    <p className="text-xs text-muted-foreground">user engagement</p>
                  </CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Cart Conversion</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{aiStatsQ.data.overall?.cartConversionRate || '0%'}</div>
                    <p className="text-xs text-muted-foreground">added to cart</p>
                  </CardContent></Card>
                <Card><CardHeader><CardTitle className="text-sm">Purchase Rate</CardTitle></CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{aiStatsQ.data.overall?.purchaseConversionRate || '0%'}</div>
                    <p className="text-xs text-muted-foreground">completed purchases</p>
                  </CardContent></Card>
              </div>

              {aiStatsQ.data.byType?.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>AI Recommendation Performance by Type</CardTitle>
                    <CardDescription>How different AI recommendation types perform</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {aiStatsQ.data.byType.map((t, i) => (
                        <div key={i} className="flex items-center justify-between p-3 border rounded">
                          <div className="flex-1">
                            <div className="font-medium capitalize">{t.recommendationType.replace('-', ' ')}</div>
                            <div className="text-sm text-muted-foreground">{t.totalViewed} views â€¢ {t.totalClicked} clicks</div>
                          </div>
                          <div className="text-right mr-4">
                            <div className="font-medium">{t.clickThroughRate}</div>
                            <div className="text-sm text-muted-foreground">CTR</div>
                          </div>
                          <div className="text-right mr-4">
                            <div className="font-medium">{t.cartConversionRate}</div>
                            <div className="text-sm text-muted-foreground">cart rate</div>
                          </div>
                          <div className="text-right">
                            <div className="font-medium">{t.purchaseConversionRate}</div>
                            <div className="text-sm text-muted-foreground">purchase rate</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {topAIQ.data && topAIQ.data.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Top Performing AI Recommendations</CardTitle>
                    <CardDescription>Products with highest AI-driven conversion rates</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {topAIQ.data.slice(0, 10).map((p) => (
                        <div key={p.productId} className="flex items-center justify-between p-3 border rounded">
                          <div className="flex-1">
                            <div className="font-medium">{p.productName}</div>
                            <div className="text-sm text-muted-foreground">{p.totalViewed} views â€¢ {p.totalClicked} clicks</div>
                          </div>
                          <div className="text-right mr-4">
                            <div className="font-medium">{p.conversionRate}</div>
                            <div className="text-sm text-muted-foreground">conversion rate</div>
                          </div>
                          <div className="text-right mr-4">
                            <div className="font-medium">{p.totalPurchased}</div>
                            <div className="text-sm text-muted-foreground">purchases</div>
                          </div>
                          <div className="text-right">
                            <div className="font-medium">{formatCurrency(p.revenue || 0)}</div>
                            <div className="text-sm text-muted-foreground">revenue</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2"><Brain className="h-5 w-5" />AI Performance Insights</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="p-2 bg-blue-50 rounded text-sm">
                        AI recommendations are generating valuable engagement with an average CTR of {aiStatsQ.data.overall?.clickThroughRate || '0%'}
                      </div>
                      <div className="p-2 bg-green-50 rounded text-sm">
                        Cart conversion rate {aiStatsQ.data.overall?.cartConversionRate || '0%'} shows the algorithm is identifying preferences
                      </div>
                      <div className="p-2 bg-purple-50 rounded text-sm">
                        Purchase rate {aiStatsQ.data.overall?.purchaseConversionRate || '0%'} demonstrates measurable revenue impact
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2"><Lightbulb className="h-5 w-5" />Optimization Opportunities</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="p-2 bg-amber-50 rounded text-sm">Improve low-performing recommendation types</div>
                      <div className="p-2 bg-amber-50 rounded text-sm">Use top-performing products as templates</div>
                      <div className="p-2 bg-amber-50 rounded text-sm">A/B test placements and timing</div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </>
          ) : (
            <div className="text-center py-8">
              <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-muted-foreground">No AI insights data available</p>
              <p className="text-sm text-gray-500 mt-2">AI recommendations will appear here once customers start interacting with suggestions</p>
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}

// ---------- Page wrapper (single default export) ----------
export default function BusinessIntelligencePage() {
  const { user } = useAuth();
  if (!user?.isAdmin) {
    return (
      <AppLayout>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
            <h2 className="text-xl font-semibold mb-2">Access Restricted</h2>
            <p className="text-gray-600">You need admin privileges to access Business Intelligence.</p>
          </div>
        </div>
      </AppLayout>
    );
  }

  return (
    <AppLayout>
      <div className="container mx-auto p-4 max-w-7xl">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button asChild variant="outline" size="sm">
              <Link href="/admin">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Link>
            </Button>
            <div>
              <h1 className="text-3xl font-bold tracking-tight flex items-center gap-2">
                <TrendingUp className="h-8 w-8" />
                Business Intelligence
              </h1>
              <p className="text-muted-foreground">Advanced analytics and insights for data-driven decision making</p>
            </div>
          </div>
        </div>

        <BIDashboardView />
      </div>
    </AppLayout>
  );
}

// ---------- Dev-time sanity checks (non-blocking) ----------
if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
  console.log('[BI] formatCurrency(1234.5) ->', formatCurrency(1234.5));
  console.log('[BI] formatPercentage(12.345) ->', formatPercentage(12.345));
}
