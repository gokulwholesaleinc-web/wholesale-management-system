// =====================
// utils/api.ts
// =====================
export const api = {
  get: (url: string) => apiRequest('GET', url),
  post: (url: string, body?: any, opts?: any) => apiRequest('POST', url, body, opts),
};

// NOTE: replace this import with your real helper
// If you already have `apiRequest` in '@/lib/queryClient', keep that and delete this shim.
// @ts-ignore
import { apiRequest } from '@/lib/queryClient';


// =====================
// utils/csv.ts
// =====================
export function escapeCSV(v: unknown) {
  let s = String(v ?? '');
  // neutralize Excel formula execution
  if (/^[=+\-@]/.test(s)) s = `'${s}`;
  // escape quotes
  s = s.replace(/"/g, '""');
  return `"${s}"`;
}

export function downloadCSV(filename: string, content: string) {
  if (typeof window === 'undefined') return;
  const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  window.URL.revokeObjectURL(url);
}


// =====================
// hooks/useDebounce.ts
// =====================
import { useEffect, useState } from 'react';
export function useDebounce<T>(value: T, ms = 300) {
  const [v, setV] = useState(value);
  useEffect(() => {
    const id = setTimeout(() => setV(value), ms);
    return () => clearTimeout(id);
  }, [value, ms]);
  return v;
}


// =====================
// components/BulkActionsBar.tsx (fixed)
// =====================
import * as React from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { DollarSign, Tag, Download, Trash2, X, Package } from 'lucide-react';

interface BulkActionsBarProps {
  selectedCount: number;
  onClearSelection: () => void;
  onBulkPriceUpdate?: () => void;
  onBulkCategoryChange?: () => void;
  onBulkExport?: () => void;
  onBulkDelete?: () => void;
  onBulkStatusUpdate?: () => void;
  className?: string;
}

export function BulkActionsBar({
  selectedCount,
  onClearSelection,
  onBulkPriceUpdate,
  onBulkCategoryChange,
  onBulkExport,
  onBulkDelete,
  onBulkStatusUpdate,
  className = '',
}: BulkActionsBarProps) {
  if (selectedCount === 0) return null;
  return (
    <div className={`fixed bottom-4 left-1/2 -translate-x-1/2 z-50 ${className}`}>
      <div className="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 flex items-center gap-3">
        <Badge variant="secondary" className="px-3 py-1">{selectedCount} selected</Badge>
        <div className="flex items-center gap-2">
          {onBulkPriceUpdate && (
            <Button size="sm" variant="outline" onClick={onBulkPriceUpdate}>
              <DollarSign className="h-4 w-4 mr-1" /> Update Prices
            </Button>
          )}
          {onBulkCategoryChange && (
            <Button size="sm" variant="outline" onClick={onBulkCategoryChange}>
              <Tag className="h-4 w-4 mr-1" /> Change Category
            </Button>
          )}
          {onBulkStatusUpdate && (
            <Button size="sm" variant="outline" onClick={onBulkStatusUpdate}>
              <Package className="h-4 w-4 mr-1" /> Update Status
            </Button>
          )}
          {onBulkExport && (
            <Button size="sm" variant="outline" onClick={onBulkExport}>
              <Download className="h-4 w-4 mr-1" /> Export
            </Button>
          )}
          {onBulkDelete && (
            <Button size="sm" variant="destructive" onClick={onBulkDelete}>
              <Trash2 className="h-4 w-4 mr-1" /> Delete
            </Button>
          )}
        </div>
        <Button size="sm" variant="ghost" onClick={onClearSelection}>
          <X className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}


// =====================
// pages/AdminBulkOperations.tsx (consolidated, unique tabs, zero-value safe, memoized, debounced, CSV hardened)
// =====================
import React, { useMemo, useRef, useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Loader2, Search, Download, Upload, DollarSign, Package, AlertTriangle, RotateCcw, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { api } from '@/utils/api';
import { escapeCSV, downloadCSV } from '@/utils/csv';
import { useDebounce } from '@/hooks/useDebounce';
import { BulkActionsBar } from '@/components/BulkActionsBar';

interface Product { id: number; name: string; sku?: string; price: number; stock: number; categoryId?: number|null; categoryName?: string; brand?: string; isDraft?: boolean; createdAt?: string; }
interface Category { id: number; name: string }

// helper
const isEmptyValue = (v: unknown) => v === null || v === undefined || (typeof v === 'string' && v.trim() === '');

export default function AdminBulkOperations() {
  const { toast } = useToast();
  const qc = useQueryClient();

  // filters/selection
  const [searchTerm, setSearchTerm] = useState('');
  const debouncedSearch = useDebounce(searchTerm, 300);
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [brandFilter, setBrandFilter] = useState('all');
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
  const [rememberSelection, setRememberSelection] = useState(false);
  const [previousSelection, setPreviousSelection] = useState<number[]>([]);

  // data
  const { data: products = [], isLoading: productsLoading } = useQuery({
    queryKey: ['/api/admin/products'],
    queryFn: () => api.get('/api/admin/products')
  });
  const { data: categories = [] } = useQuery<Category[]>({ queryKey: ['/api/admin/categories'], queryFn: () => api.get('/api/admin/categories') });
  const brands = useMemo(() => [...new Set(products.map((p: Product) => p.brand).filter(Boolean))] as string[], [products]);

  // filtering (memoized)
  const filteredProducts: Product[] = useMemo(() => {
    return (products as Product[]).filter((p) => {
      const statusMatch = statusFilter === 'all' ||
        (statusFilter === 'live' && !p.isDraft) ||
        (statusFilter === 'draft' && p.isDraft) ||
        (statusFilter === 'low-stock' && (p.stock ?? 0) < 10) ||
        (statusFilter === 'out-of-stock' && (p.stock ?? 0) === 0);
      const categoryMatch = categoryFilter === 'all' || String(p.categoryId ?? '') === categoryFilter;
      const brandMatch = brandFilter === 'all' || p.brand === brandFilter;
      const q = debouncedSearch.toLowerCase();
      const searchMatch = !q ||
        p.name?.toLowerCase().includes(q) ||
        p.sku?.toLowerCase().includes(q) ||
        p.brand?.toLowerCase().includes(q) ||
        p.categoryName?.toLowerCase().includes(q);
      return statusMatch && categoryMatch && brandMatch && searchMatch;
    });
  }, [products, statusFilter, categoryFilter, brandFilter, debouncedSearch]);

  // bulk operation state
  type UpdateType = 'price' | 'cost' | 'stock' | 'status' | 'category' | 'description' | 'brand' | 'weight' | 'size' | 'featured' | 'taxPercentage' | 'flatTax';
  type Adjustment = 'set' | 'increase' | 'decrease' | 'percentage';
  const [bulkOperation, setBulkOperation] = useState<UpdateType>('price');
  const [adjustmentType, setAdjustmentType] = useState<Adjustment>('set');
  const [bulkValue, setBulkValue] = useState('');

  // mutation
  const bulkUpdateMutation = useMutation({
    mutationFn: async (payload: any) => api.post('/api/admin/bulk-operations', payload),
    onMutate: async (op) => {
      await qc.cancelQueries({ queryKey: ['/api/admin/products'] });
      const prev = qc.getQueryData(['/api/admin/products']);
      // optimistic: simple local mapper for stock/price/status
      qc.setQueryData(['/api/admin/products'], (old: Product[] = []) => old.map((p) => {
        if (!op.productIds.includes(p.id)) return p;
        switch (op.updateType as UpdateType) {
          case 'stock': return { ...p, stock: Number(op.value) } as Product;
          case 'price': return { ...p, price: Number(op.value) } as Product;
          case 'status': return { ...p, isDraft: op.value === 'draft' } as Product;
          default: return p;
        }
      }));
      return { prev };
    },
    onError: (_e, _op, ctx) => ctx?.prev && qc.setQueryData(['/api/admin/products'], ctx.prev),
    onSuccess: () => {
      toast({ title: 'Success', description: `Bulk operation completed for ${selectedProducts.length} products.` });
      qc.invalidateQueries({ queryKey: ['/api/admin/products'] });
      setPreviousSelection([...selectedProducts]);
      if (!rememberSelection) setSelectedProducts([]);
      setBulkValue('');
    },
  });

  // selection handlers
  const toggleProduct = (id: number, checked: boolean) => {
    setSelectedProducts((prev) => checked ? [...prev, id] : prev.filter((x) => x !== id));
  };
  const handleSelectAll = () => {
    setSelectedProducts((prev) => prev.length === filteredProducts.length ? [] : filteredProducts.map((p) => p.id));
  };

  // CSV export (hardened)
  const handleExportCSV = async () => {
    const dataToExport = selectedProducts.length > 0
      ? filteredProducts.filter(p => selectedProducts.includes(p.id))
      : filteredProducts.length > 0 ? filteredProducts : products;

    const headers = ['ID','Name','SKU','Price','Stock','Category','Brand','Status','Created At'];
    const rows = (dataToExport as Product[]).map(p => [
      p.id,
      escapeCSV(p.name),
      escapeCSV(p.sku ?? ''),
      p.price ?? 0,
      p.stock ?? 0,
      escapeCSV(p.categoryName ?? ''),
      escapeCSV(p.brand ?? ''),
      p.isDraft ? 'Draft' : 'Live',
      p.createdAt ? new Date(p.createdAt).toLocaleDateString() : ''
    ].join(','));

    const csv = [headers.join(','), ...rows].join('\n');
    const exportType = selectedProducts.length > 0 ? 'selected' : (filteredProducts.length < products.length ? 'filtered' : 'all');
    downloadCSV(`products-${exportType}-${new Date().toISOString().slice(0,10)}.csv`, csv);
    toast({ title: 'Export Successful', description: `Exported ${dataToExport.length} products to CSV` });
  };

  // CSV import (raw text area demo)
  const [csvData, setCsvData] = useState('');
  const csvImportMutation = useMutation({
    mutationFn: async (payload: any) => api.post('/api/admin/bulk-operations/csv-import', payload),
    onSuccess: (res) => {
      toast({ title: 'CSV Import Complete', description: `Updated ${res.updated} products, ${res.errors} errors.` });
      qc.invalidateQueries({ queryKey: ['/api/admin/products'] });
      setCsvData('');
    }
  });

  const runBulk = () => {
    if (selectedProducts.length === 0) {
      toast({ title: 'No Selection', description: 'Please select products to update.', variant: 'destructive' });
      return;
    }
    // validate numeric when needed
    let val: string | number | boolean = bulkValue;
    if (['price','cost','stock','taxPercentage'].includes(bulkOperation)) {
      const n = Number.parseFloat(bulkValue);
      if (Number.isNaN(n)) { toast({ title:'Invalid Value', description:'Enter a valid number.', variant:'destructive' }); return; }
      val = n;
    } else if (bulkOperation === 'status') {
      val = bulkValue === 'draft'; // server can interpret
    } else if (bulkOperation === 'category') {
      const n = Number.parseInt(bulkValue, 10);
      if (Number.isNaN(n)) { toast({ title:'Invalid Category', description:'Pick a valid category.', variant:'destructive' }); return; }
      val = n;
    } else if (['description','brand','weight','size'].includes(bulkOperation)) {
      if (isEmptyValue(bulkValue)) { toast({ title:'Empty Value', description:'Please enter a value.', variant:'destructive' }); return; }
      val = bulkValue.trim();
    }

    bulkUpdateMutation.mutate({
      productIds: selectedProducts,
      updateType: bulkOperation,
      value: val,
      adjustmentType,
    });
  };

  const restorePreviousSelection = () => {
    if (previousSelection.length) {
      setSelectedProducts([...previousSelection]);
      toast({ title: 'Selection Restored', description: `Restored ${previousSelection.length} items.` });
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Tabs defaultValue="tab-bulk" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="tab-bulk">Bulk Operations</TabsTrigger>
          <TabsTrigger value="tab-search">Smart Search</TabsTrigger>
          <TabsTrigger value="tab-quick">Quick Stock</TabsTrigger>
          <TabsTrigger value="tab-csv">CSV Tools</TabsTrigger>
        </TabsList>

        {/* BULK */}
        <TabsContent value="tab-bulk" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Package className="h-5 w-5"/>Bulk Operations</CardTitle>
              <CardDescription>Select products and apply changes</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <Label>Operation Type</Label>
                  <Select value={bulkOperation} onValueChange={(v:any)=>setBulkOperation(v)}>
                    <SelectTrigger><SelectValue placeholder="Select operation"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="price">Update Prices</SelectItem>
                      <SelectItem value="cost">Update Cost</SelectItem>
                      <SelectItem value="stock">Update Stock</SelectItem>
                      <SelectItem value="status">Change Status</SelectItem>
                      <SelectItem value="category">Change Category</SelectItem>
                      <SelectItem value="description">Update Descriptions</SelectItem>
                      <SelectItem value="brand">Update Brand</SelectItem>
                      <SelectItem value="weight">Update Weight/Size</SelectItem>
                      <SelectItem value="featured">Toggle Featured</SelectItem>
                      <SelectItem value="taxPercentage">Update Tax %</SelectItem>
                      <SelectItem value="flatTax">Apply Flat Tax</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {(bulkOperation === 'price' || bulkOperation === 'cost' || bulkOperation === 'stock' || bulkOperation === 'taxPercentage') && (
                  <div>
                    <Label>Adjustment Type</Label>
                    <Select value={adjustmentType} onValueChange={(v:any)=>setAdjustmentType(v)}>
                      <SelectTrigger><SelectValue/></SelectTrigger>
                      <SelectContent>
                        <SelectItem value="set">Set Value</SelectItem>
                        <SelectItem value="increase">Increase By</SelectItem>
                        <SelectItem value="decrease">Decrease By</SelectItem>
                        <SelectItem value="percentage">Percentage Change</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}

                <div>
                  <Label>Value</Label>
                  <Input
                    placeholder={
                      bulkOperation === 'price' ? 'e.g., 29.99' :
                      bulkOperation === 'stock' ? 'e.g., 12' :
                      bulkOperation === 'taxPercentage' ? 'e.g., 8.75' :
                      'Enter value'
                    }
                    type={(bulkOperation === 'price' || bulkOperation === 'stock' || bulkOperation === 'taxPercentage') ? 'number' : 'text'}
                    value={bulkValue}
                    onChange={(e)=>setBulkValue(e.target.value)}
                  />
                </div>

                <div className="space-y-3">
                  <Button onClick={runBulk} disabled={bulkUpdateMutation.isPending || selectedProducts.length===0} className="w-full">
                    {bulkUpdateMutation.isPending ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin"/>Updating...</>) : `Update ${selectedProducts.length} Products`}
                  </Button>
                  <div className="flex items-center gap-2 text-sm">
                    <input type="checkbox" id="remember-selection" checked={rememberSelection} onChange={(e)=>setRememberSelection(e.target.checked)} className="rounded" />
                    <label htmlFor="remember-selection" className="text-sm text-gray-600">Keep selection after update</label>
                  </div>
                  {previousSelection.length>0 && (
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" onClick={restorePreviousSelection} className="flex-1"><RotateCcw className="mr-1 h-3 w-3"/>Restore ({previousSelection.length})</Button>
                      <Button variant="outline" size="sm" onClick={()=>setPreviousSelection([])} className="px-3"><X className="h-3 w-3"/></Button>
                    </div>
                  )}
                </div>
              </div>

              <div className="p-3 bg-blue-50 rounded-lg" hidden={selectedProducts.length===0}>
                <p className="text-sm text-blue-700"><strong>{selectedProducts.length}</strong> products selected for bulk operation</p>
              </div>
            </CardContent>
          </Card>

          {/* Filters & List */}
          <Card>
            <CardHeader><CardTitle>Filters & Selection</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-4">
                <div className="flex-1">
                  <Label>Search Products</Label>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400"/>
                    <Input className="pl-10" placeholder="Search by name, SKU, brand, category" value={searchTerm} onChange={(e)=>setSearchTerm(e.target.value)} />
                  </div>
                </div>
                <Button variant="outline" size="sm" onClick={()=>{ setSearchTerm(''); setCategoryFilter('all'); setStatusFilter('all'); setBrandFilter('all'); }}>Clear Filters</Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label>Category Filter</Label>
                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All</SelectItem>
                      {categories.sort((a,b)=>a.name.localeCompare(b.name)).map(c=>(<SelectItem key={c.id} value={String(c.id)}>{c.name}</SelectItem>))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Status Filter</Label>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="live">Live</SelectItem>
                      <SelectItem value="draft">Draft</SelectItem>
                      <SelectItem value="low-stock">Low Stock (&lt; 10)</SelectItem>
                      <SelectItem value="out-of-stock">Out of Stock</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Brand Filter</Label>
                  <Select value={brandFilter} onValueChange={setBrandFilter}>
                    <SelectTrigger><SelectValue placeholder="All Brands"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Brands</SelectItem>
                      {brands.map((b)=> (<SelectItem key={b} value={b}>{b}</SelectItem>))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex items-end"><Button variant="outline" onClick={handleSelectAll} className="w-full">{selectedProducts.length===filteredProducts.length ? 'Deselect All' : 'Select All Filtered'}</Button></div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader><CardTitle>Products ({filteredProducts.length})</CardTitle></CardHeader>
            <CardContent>
              {productsLoading ? (
                <div className="text-center py-8">Loading products...</div>
              ) : (
                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {filteredProducts.map(p=> (
                    <div key={p.id} className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-gray-50">
                      <Checkbox
                        checked={selectedProducts.includes(p.id)}
                        onCheckedChange={(c)=> toggleProduct(p.id, c === true)}
                      />
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2">
                          <span className="font-medium truncate">{p.name}</span>
                          <Badge variant={p.isDraft ? 'secondary' : 'default'}>{p.isDraft ? 'Draft' : 'Live'}</Badge>
                          {(p.stock ?? 0) < 10 && (<Badge variant="destructive">Low Stock</Badge>)}
                        </div>
                        <div className="text-sm text-gray-500 flex gap-4">
                          <span>Price: ${p.price}</span>
                          <span>Stock: {p.stock}</span>
                          <span>Category: {p.categoryName}</span>
                          {p.sku && <span>SKU: {p.sku}</span>}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* SMART SEARCH (unique id) */}
        <TabsContent value="tab-search" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Search className="h-5 w-5"/>Smart Search & Filters</CardTitle>
              <CardDescription>Advanced product filtering</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Search</Label>
                  <Input value={searchTerm} onChange={(e)=>setSearchTerm(e.target.value)} placeholder="Name, SKU, brand..." />
                </div>
                <div>
                  <Label>Brand</Label>
                  <Select value={brandFilter} onValueChange={setBrandFilter}>
                    <SelectTrigger><SelectValue placeholder="All Brands"/></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Brands</SelectItem>
                      {brands.map((b)=> (<SelectItem key={b} value={b}>{b}</SelectItem>))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="border rounded-lg p-4 bg-gray-50">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-medium">Filter Results</h4>
                  <Badge variant="outline">{filteredProducts.length} found</Badge>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="flex items-center gap-2"><DollarSign className="h-4 w-4 text-blue-500"/><span>Avg Price: {((filteredProducts.reduce((s,p)=>s+(p.price||0),0)/Math.max(1,filteredProducts.length))).toFixed(2)}</span></div>
                  <div className="flex items-center gap-2"><Package className="h-4 w-4 text-purple-500"/><span>Total Stock: {filteredProducts.reduce((s,p)=>s+(p.stock||0),0)}</span></div>
                  <div className="flex items-center gap-2"><AlertTriangle className="h-4 w-4 text-orange-500"/><span>Low Stock: {filteredProducts.filter(p=> (p.stock||0) < 10).length}</span></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* QUICK STOCK (unique id) */}
        <TabsContent value="tab-quick" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Package className="h-5 w-5"/>Quick Stock</CardTitle>
              <CardDescription>Update a single item by SKU</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* simple quick adjust */}
              <QuickStockAdjust products={products} onApply={(id, qty)=>{
                setSelectedProducts([id]);
                setBulkOperation('stock');
                setAdjustmentType('set');
                setBulkValue(String(qty));
                runBulk();
              }} />
            </CardContent>
          </Card>
        </TabsContent>

        {/* CSV (unique id) */}
        <TabsContent value="tab-csv" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader><CardTitle className="flex items-center gap-2"><Upload className="h-5 w-5"/>CSV Import</CardTitle><CardDescription>Paste CSV data (ID,SKU,Stock)</CardDescription></CardHeader>
              <CardContent className="space-y-4">
                <Textarea rows={8} placeholder={`ID,SKU,Stock\n1,ABC123,50\n2,DEF456,25`} value={csvData} onChange={(e)=>setCsvData(e.target.value)} />
                <Button className="w-full" onClick={()=>{
                  if (!csvData.trim()) { toast({ title:'No Data', description:'Paste CSV data to import.', variant:'destructive' }); return; }
                  csvImportMutation.mutate({ csvData, operation: 'stock-update' });
                }} disabled={csvImportMutation.isPending}>
                  {csvImportMutation.isPending ? 'Importing...' : 'Import CSV Data'}
                </Button>
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle className="flex items-center gap-2"><Download className="h-5 w-5"/>CSV Export</CardTitle><CardDescription>Export current view</CardDescription></CardHeader>
              <CardContent className="space-y-4">
                <Button onClick={handleExportCSV} variant="outline" className="w-full"><Download className="h-4 w-4 mr-2"/>Export to CSV</Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      <BulkActionsBar
        selectedCount={selectedProducts.length}
        onClearSelection={()=>setSelectedProducts([])}
        onBulkExport={handleExportCSV}
      />
    </div>
  );
}

// --- small helper component ---
function QuickStockAdjust({ products, onApply }: { products: Product[]; onApply: (id:number, qty:number)=>void }) {
  const [sku, setSku] = useState('');
  const [qty, setQty] = useState('');
  const { toast } = useToast();
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
      <div>
        <Label>SKU</Label>
        <Input value={sku} onChange={(e)=>setSku(e.target.value)} placeholder="Scan or type SKU"/>
      </div>
      <div>
        <Label>Quantity</Label>
        <Input type="number" value={qty} onChange={(e)=>setQty(e.target.value)} placeholder="e.g., 12"/>
      </div>
      <div className="flex items-end">
        <Button className="w-full" onClick={()=>{
          const p = (products as Product[]).find(pp=>pp.sku?.toLowerCase()===sku.toLowerCase());
          const n = Number.parseInt(qty, 10);
          if (!p) { toast({ title:'Not Found', description:'No product with that SKU', variant:'destructive' }); return; }
          if (Number.isNaN(n)) { toast({ title:'Invalid Qty', description:'Enter a number', variant:'destructive' }); return; }
          onApply(p.id, n);
          setSku(''); setQty('');
        }}>Set Stock</Button>
      </div>
    </div>
  );
}
