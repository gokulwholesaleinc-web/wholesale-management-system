// PasswordResetService.ts â€“ tokenized flow (new/alternative methods)
import { createResetToken } from "../utils/resetToken";
import crypto from "crypto";
import { hashPassword } from "../helpers/bcrypt-helper";

const APP_URL = process.env.APP_URL || "http://localhost:5173";

static async initiatePasswordReset(emailOrUsername: string) {
  // ...find user with neutral response just like above...
  // If user found:
  const { token, tokenHash } = createResetToken();
  const expiry = new Date(Date.now() + 30 * 60 * 1000); // 30 minutes

  await storage.upsertPasswordReset({
    userId: user.id,
    tokenHash,
    expiresAt: expiry,
    used: false,
    createdAt: new Date(),
  });

  const link = `${APP_URL}/reset-password?uid=${encodeURIComponent(
    user.id
  )}&token=${encodeURIComponent(token)}`;

  await this.sendResetLinkEmail(user.email, user.firstName || user.username || "User", link);

  return {
    success: true,
    message: "If an account exists for that email/username, a reset email has been sent.",
  };
}

static async completePasswordResetWithToken(
  userId: string,
  rawToken: string,
  newPassword: string
) {
  const tokenHash = crypto.createHash("sha256").update(rawToken).digest("hex");
  const rec = await storage.getPasswordResetByUserId(userId);

  if (!rec || rec.used || rec.tokenHash !== tokenHash || new Date() > new Date(rec.expiresAt)) {
    return { success: false, message: "Invalid or expired reset link." };
  }

  // rotate password
  const hashedNewPassword = await hashPassword(newPassword);
  await storage.updateUser({
    id: userId,
    passwordHash: hashedNewPassword,
    tempPassword: undefined,
    tempPasswordExpiry: undefined,
    forcePasswordChange: false,
  });

  await storage.markPasswordResetUsed(rec.id);

  return { success: true, message: "Password successfully updated." };
}

// simple email for link (SendGrid)
static async sendResetLinkEmail(email: string, userName: string, link: string) {
  // ... sgMail config ...
  const subject = "Password Reset - Gokul Wholesale";
  const html = `Click the secure link to reset your password:<br/><a href="${link}">${link}</a><br/><br/>This link expires in 30 minutes.`;
  const text = `Reset your password: ${link}\nThis link expires in 30 minutes.`;
  try {
    await sgMail.send({ to: email, from: { email: 'info@shopgokul.com', name: 'Gokul Wholesale Inc.' }, subject, html, text });
    return true;
  } catch (e) {
    console.error("SendGrid reset link failed:", e);
    return false;
  }
}
