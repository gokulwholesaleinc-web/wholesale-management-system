// Draws the full page header (company block + order info + customer panel).
// Returns the next Y position to continue writing.
private drawCommonHeader(
  doc: any,
  receiptData: ReceiptData,
  fs: any,
  path: any,
  pageWidth: number,
  pageHeight: number
): number {
  const professionalNavy = [52, 73, 94] as const;
  const subtleGray = [248, 249, 250] as const;
  const lightGray = [236, 240, 241] as const;
  const textDark = [33, 37, 41] as const;

  // Background strip
  doc.setFillColor(...subtleGray);
  doc.rect(0, 0, pageWidth, 45, "F");
  doc.setDrawColor(...professionalNavy);
  doc.setLineWidth(0.5);
  doc.line(0, 45, pageWidth, 45);

  // Logo
  try {
    const logoPath = path.join(process.cwd(), "public", "gokul-logo.png");
    if (fs.existsSync(logoPath)) {
      const logoData = fs.readFileSync(logoPath);
      const logoBase64 = `data:image/png;base64,${logoData.toString("base64")}`;
      doc.setFillColor(255, 255, 255);
      doc.circle(25, 20, 12, "F");
      doc.addImage(logoBase64, "PNG", 15, 10, 20, 20);
    }
  } catch {}

  // Company text
  doc.setTextColor(...professionalNavy);
  doc.setFontSize(22);
  doc.setFont("helvetica", "bold");
  doc.text(COMPANY.name, 50, 22);

  doc.setTextColor(...textDark);
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  doc.text(COMPANY.address, 50, 30);
  doc.text(`${COMPANY.phone} | ${COMPANY.email}`, 50, 36);
  doc.text(COMPANY.tp, 50, 42);

  // Order info (right)
  doc.setTextColor(...professionalNavy);
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text(`Order #${receiptData.orderNumber}`, pageWidth - 20, 22, { align: "right" });
  doc.setTextColor(...textDark);
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");
  doc.text(`Date: ${receiptData.orderDate}`, pageWidth - 20, 32, { align: "right" });

  // ----- Customer info card (dynamic height; shows address) -----
  let y = 55;
  const leftX = 15;
  const rightX = pageWidth / 2;
  const leftWidth = rightX - leftX - 10; // room for wrapping

  // Prepare left-side lines
  const nameLine = receiptData.customerName || "Customer";
  const address = (receiptData.customerAddress || "").trim();
  const addressLines = address ? doc.splitTextToSize(address, leftWidth) : [];

  // Compute panel height based on number of lines
  const baseHdr = 7;                 // "Customer Information" label area
  const lineH = 6;                   // per line
  const leftLinesCount = 1 + (addressLines.length || 0); // name + address lines
  const contentH = baseHdr + leftLinesCount * lineH;
  const minH = 22;                   // minimum height to look nice
  const panelH = Math.max(minH, contentH);

  // Panel background + border
  doc.setFillColor(...lightGray);
  doc.rect(10, y, pageWidth - 20, panelH, "F");

  // Header
  doc.setTextColor(...textDark);
  doc.setFont("helvetica", "bold");
  doc.setFontSize(12);
  doc.text("Customer Information", leftX, y + 7);

  // Left (name + address)
  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  let ly = y + 15;
  doc.text(nameLine, leftX, ly);
  if (addressLines.length) {
    for (const ln of addressLines) {
      ly += lineH;
      doc.text(ln, leftX, ly);
    }
  }

  // Right (email/phone single lines)
  const ry = y + 13;
  if (receiptData.customerEmail) doc.text(`Email: ${receiptData.customerEmail}`, rightX, ry);
  if (receiptData.customerPhone) doc.text(`Phone: ${receiptData.customerPhone}`, rightX, ry + 6);

  // Return baseline for body content (small gap after the card)
  return y + panelH + 8;
}
