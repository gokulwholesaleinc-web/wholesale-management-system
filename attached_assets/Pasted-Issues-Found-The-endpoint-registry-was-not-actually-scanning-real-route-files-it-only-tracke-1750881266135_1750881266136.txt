Issues Found:

    The endpoint registry was not actually scanning real route files - it only tracked manually registered endpoints
    No automatic detection of duplicates from actual codebase
    Missing live validation of routing conflicts
    Registry was disconnected from reality - showed endpoints that may not exist and missed real ones

What Was Added/Fixed:
1. Automatic Route File Scanning Function

function scanRouteFiles(): EndpointInfo[] {
  const fs = require('fs');
  const path = require('path');
  
  const routeFiles = [
    path.join(__dirname, 'routes.ts'),
    path.join(__dirname, 'routes/auth.ts'),
    path.join(__dirname, 'routes/cart.ts'),
    path.join(__dirname, 'routes/notifications.ts')
  ];

  const foundEndpoints: EndpointInfo[] = [];
  const endpointPattern = /app\.(get|post|put|patch|delete)\s*\(\s*['"`]([^'"`]+)['"`]/g;

  routeFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        let match;
        
        while ((match = endpointPattern.exec(content)) !== null) {
          const method = match[1].toUpperCase();
          const endpointPath = match[2];
          
          foundEndpoints.push({
            method,
            path: endpointPath,
            handler: 'scanned-from-file',
            module: path.basename(filePath),
            middleware: ['unknown'],
            description: `Scanned from ${filePath}`,
            status: 'active'
          });
        }
      } catch (error) {
        console.error(`Error scanning ${filePath}:`, error);
      }
    }
  });

  return foundEndpoints;
}

2. Live Sync Function

export function syncWithActualRoutes(): { scanned: number; duplicates: string[]; report: string[] } {
  const scannedEndpoints = scanRouteFiles();
  const duplicates: string[] = [];
  const endpointCounts = new Map<string, number>();
  
  // Count occurrences of each endpoint
  scannedEndpoints.forEach(endpoint => {
    const key = `${endpoint.method} ${endpoint.path}`;
    endpointCounts.set(key, (endpointCounts.get(key) || 0) + 1);
  });
  
  // Find duplicates
  endpointCounts.forEach((count, key) => {
    if (count > 1) {
      duplicates.push(`${key} (${count} times)`);
    }
  });
  
  // Clear registry and add scanned endpoints
  const registryInstance = EndpointRegistry.getInstance();
  registryInstance['endpoints'].clear();
  
  scannedEndpoints.forEach(endpoint => {
    registryInstance.register(endpoint);
  });
  
  const report = [
    `=== LIVE ROUTE SCAN REPORT ===`,
    `📁 Files Scanned: routes.ts, auth.ts, cart.ts, notifications.ts`,
    `🔍 Endpoints Found: ${scannedEndpoints.length}`,
    `🔄 Duplicates Found: ${duplicates.length}`,
    ``,
    ...duplicates.map(dup => `❌ DUPLICATE: ${dup}`),
    ``
  ];
  
  return { scanned: scannedEndpoints.length, duplicates, report };
}

3. Enhanced Validation Function

export function validateAllEndpoints(): void {
  console.log('🔍 Scanning actual route files for endpoints...');
  const syncResult = syncWithActualRoutes();
  
  console.log(syncResult.report.join('\n'));
  
  const registryReport = registry.validateEndpoints();
  console.log(registryReport.report.join('\n'));
  
  if (syncResult.duplicates.length > 0) {
    console.log('\n🚨 ACTION REQUIRED:');
    console.log('- Remove duplicate endpoints from route files');
    console.log('- Consolidate routing logic to prevent conflicts');
  } else {
    console.log('\n✅ NO DUPLICATES FOUND - ROUTING IS CLEAN');
  }
}

4. Validation Script

#!/usr/bin/env tsx

import { syncWithActualRoutes, validateAllEndpoints } from '../server/endpoint-registry';

console.log('🏗️  COMPREHENSIVE ENDPOINT VALIDATION STARTING...\n');

// Scan actual files and validate
const result = syncWithActualRoutes();

console.log('📊 VALIDATION SUMMARY:');
console.log(`   Endpoints Scanned: ${result.scanned}`);
console.log(`   Duplicates Found: ${result.duplicates.length}`);
console.log(`   Status: ${result.duplicates.length === 0 ? '✅ CLEAN' : '❌ NEEDS FIXING'}\n`);

if (result.duplicates.length > 0) {
  console.log('🔧 FIXES NEEDED:');
  result.duplicates.forEach(dup => {
    console.log(`   - Remove duplicate: ${dup}`);
  });
  console.log('');
}

// Run full validation
validateAllEndpoints();

console.log('\n🎯 NEXT STEPS:');
if (result.duplicates.length === 0) {
  console.log('   ✅ Your routing system is clean and optimized!');
  console.log('   ✅ No duplicates or conflicts detected');
} else {
  console.log('   1. Fix the duplicate endpoints listed above');
  console.log('   2. Run this script again to verify fixes');
  console.log('   3. Consider using the consolidated routing approach');
}

5. Package.json Scripts

"validate-endpoints": "tsx scripts/validate-endpoints.ts",
"check-endpoints": "tsx scripts/check-endpoints.ts"