# POS PWA (In‑Store) – Staged Rollout Pack (Single Paste)

**What to do:** Ship the POS **PWA now** so we can test install/offline early, but **gate it** and **stage under `/instore-next/`** until the new POS is fully validated. Final cutover will **replace the old `/instore`** so we end with **one unified /instore**.

---

## Decisions (lock these)

* Proceed with the **separate POS PWA** now.
* Stage under **`/instore-next/`** with feature flags. Do **not** touch the current `/instore` yet.
* Keep the old POS only for a brief parallel run. **End state:** remove old POS and its SW; **one unified `/instore`**.

### Why now (not later)?

* Validates **offline queue + install** early.
* Keeps **main app memory/storage** light (separate SW + cache scope).
* Zero risk to production because it’s scoped + feature‑flagged.

---

## Env flags

Add to your `.env` (or runtime config):

```
VITE_POS_PWA_ENABLED=true   # enable PWA registration (staging first)
POS_READONLY=true           # Phase 1: POS endpoints read-only
PRINTER_ESC_POS_ENABLED=false
```

---

## 1) Vite multi‑page build (main + POS staged)

Create/patch **`vite.config.ts`** (⚙️ adjust if not using Vite):

```ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { resolve } from 'path';

export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      input: {
        main: resolve(__dirname, 'index.html'),
        instoreNext: resolve(__dirname, 'instore-next/index.html'),
      }
    }
  },
  server: { port: 5173 }
});
```

**Client layout:**

```
client/
  index.html                       # main app
  instore-next/
    index.html                     # POS PWA entry (staged)
    manifest.webmanifest           # POS manifest (scope /instore-next/)
    sw.js                          # POS service worker (scoped)
    icons/
      icon-192.png
      icon-512.png
  src/
    instore/PosApp.tsx             # your POS app entry component
    instore/pwa.ts                 # registers SW + install prompt
```

---

## 2) POS PWA Entry HTML (staged)

Create **`client/instore-next/index.html`**

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta name="theme-color" content="#111827" />
    <link rel="manifest" href="/instore-next/manifest.webmanifest">
    <link rel="apple-touch-icon" href="/instore-next/icons/icon-192.png" />
    <title>In‑Store POS (Staged)</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/instore/pwa.ts"></script>
    <script type="module" src="/src/instore/PosApp.tsx"></script>
  </body>
</html>
```

---

## 3) POS Manifest (scoped to `/instore-next/`)

Create **`client/instore-next/manifest.webmanifest`**

```json
{
  "name": "Wholesale In‑Store POS",
  "short_name": "POS",
  "start_url": "/instore-next/",
  "scope": "/instore-next/",
  "display": "standalone",
  "orientation": "landscape",
  "background_color": "#111827",
  "theme_color": "#111827",
  "icons": [
    { "src": "/instore-next/icons/icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/instore-next/icons/icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}
```

---

## 4) POS Service Worker (scoped to `/instore-next/`)

Create **`client/instore-next/sw.js`**

```js
// Scope: /instore-next/ (register with that scope)
const STATIC_CACHE = 'instore-next-static-v1';
const RUNTIME_CACHE = 'instore-next-runtime-v1';

const STATIC_ASSETS = [
  '/instore-next/',
  '/instore-next/index.html',
];

self.addEventListener('install', (event) => {
  event.waitUntil(caches.open(STATIC_CACHE).then((cache) => cache.addAll(STATIC_ASSETS)));
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  event.waitUntil((async () => {
    const names = await caches.keys();
    await Promise.all(names.filter(n => ![STATIC_CACHE, RUNTIME_CACHE].includes(n)).map(n => caches.delete(n)));
    await self.clients.claim();
  })());
});

// Strategy:
//  - /assets/* → stale-while-revalidate
//  - HTML → network-first with fallback to cached app shell
//  - Do NOT cache POST/PUT/DELETE or /pos/* writes (handled by app's offline queue)
self.addEventListener('fetch', (event) => {
  const req = event.request;
  const url = new URL(req.url);

  if (!url.pathname.startsWith('/instore-next') && !url.pathname.startsWith('/assets')) return;
  if (req.method !== 'GET') return;

  if (url.pathname.startsWith('/assets')) {
    event.respondWith((async () => {
      const cache = await caches.open(RUNTIME_CACHE);
      const cached = await cache.match(req);
      const fetchPromise = fetch(req).then((res) => {
        if (res && res.status === 200) cache.put(req, res.clone());
        return res;
      }).catch(() => cached);
      return cached || fetchPromise;
    })());
    return;
  }

  if (req.headers.get('accept')?.includes('text/html')) {
    event.respondWith((async () => {
      try { return await fetch(req); } catch (e) {
        const cache = await caches.open(STATIC_CACHE);
        return (await cache.match('/instore-next/index.html')) || new Response('Offline', { status: 503 });
      }
    })());
    return;
  }
});
```

---

## 5) PWA bootstrap (gated registration + install prompt)

Create **`client/src/instore/pwa.ts`**

```ts
// Register SW with /instore-next scope and manage A2HS prompt

const ENABLE_PWA = import.meta.env.VITE_POS_PWA_ENABLED === 'true' && location.hostname !== 'localhost';

if ('serviceWorker' in navigator && ENABLE_PWA) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/instore-next/sw.js', { scope: '/instore-next/' })
      .catch(err => console.warn('[POS PWA] SW register failed', err));
  });
}

let deferredPrompt: any = null;
window.addEventListener('beforeinstallprompt', (e: any) => {
  e.preventDefault();
  deferredPrompt = e;
  (window as any).__showInstallButton?.();
});

export async function triggerInstall() {
  if (deferredPrompt) {
    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    console.log('[POS PWA] Install choice:', outcome);
    deferredPrompt = null;
  }
}

export async function getStorageEstimate() {
  if ((navigator as any).storage?.estimate) {
    return await (navigator as any).storage.estimate();
  }
  return null;
}
```

> Add a small "Install POS" button in your POS header that calls `triggerInstall()` and show free/used storage via `getStorageEstimate()`.

---

## 6) Server: serve staged POS statics with SPA fallback

Patch **`server/src/app.ts`** (⚙️ adjust build paths):

```ts
import express from 'express';
import path from 'path';

const distRoot = path.resolve(__dirname, '../../client/dist');

app.use('/instore-next', express.static(path.join(distRoot, 'instore-next')));
app.get('/instore-next/*', (_req, res) => {
  res.sendFile(path.join(distRoot, 'instore-next/index.html'));
});
```

---

## 7) Keep main app SW away from `/instore-next`

If your main app uses a service worker, ensure it does **not** intercept `/instore-next/*` requests. Either guard in its `fetch` handler or scope it away from POS pages.

---

## 8) Cutover plan — when acceptance passes

1. Change **scope/paths** from `/instore-next/` → `/instore/` in:

   * `instore/index.html` (copy of staged file)
   * `instore/manifest.webmanifest`
   * `instore/sw.js` (cache names can bump to `instore-static-v1`/`instore-runtime-v1`)
   * `pwa.ts` registration path: `navigator.serviceWorker.register('/instore/sw.js', { scope: '/instore/' })`
2. Update server static routes to `/instore` and remove `/instore-next`.
3. Set `POS_READONLY=false`.
4. **Unregister legacy SW** (old POS) on first load after cutover:

```js
navigator.serviceWorker.getRegistrations?.().then(rs => rs.forEach(r => r.unregister()));
```

5. Delete old POS code & assets.

**End state:** **one unified `/instore`** PWA, old `/instore` removed.

---

## 9) Acceptance tests

* Install: visiting `/instore-next/` shows install option; app opens standalone landscape.
* Offline: app shell loads offline; your internal offline queue syncs when online.
* Separation: clearing storage for main app does **not** remove the staged POS (separate SW/cache).
* Performance: POS bundle is small; no cross‑pollution with main app caches.

---

## 10) What to send to the agent (summary)

* **Yes, send this PWA pack now.**
* Stage under **`/instore-next/`** with `VITE_POS_PWA_ENABLED=true` and `POS_READONLY=true`.
* Keep old `/instore` live during validation.
* After acceptance, **cut over to `/instore/`** and **remove the old POS**, leaving one unified `/instore`.

---

**Done.** Paste this entire pack to your agent and proceed. This delivers a scoped, low‑memory POS PWA today, with a clean path to replace the legacy `/instore` once you’re ready.
