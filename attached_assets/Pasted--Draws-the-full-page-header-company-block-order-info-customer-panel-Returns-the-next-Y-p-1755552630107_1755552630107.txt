// Draws the full page header (company block + order info + customer panel).
// Returns the next Y position to continue writing.
private drawCommonHeader(
  doc: any,
  receiptData: ReceiptData,
  fs: any,
  path: any,
  pageWidth: number,
  pageHeight: number
): number {
  const professionalNavy = [52, 73, 94] as const;
  const subtleGray = [248, 249, 250] as const;
  const lightGray = [236, 240, 241] as const;
  const textDark = [33, 37, 41] as const;

  // Background strip
  doc.setFillColor(...subtleGray);
  doc.rect(0, 0, pageWidth, 45, "F");
  doc.setDrawColor(...professionalNavy);
  doc.setLineWidth(0.5);
  doc.line(0, 45, pageWidth, 45);

  // Logo
  try {
    const logoPath = path.join(process.cwd(), "public", "gokul-logo.png");
    if (fs.existsSync(logoPath)) {
      const logoData = fs.readFileSync(logoPath);
      const logoBase64 = `data:image/png;base64,${logoData.toString("base64")}`;
      doc.setFillColor(255, 255, 255);
      doc.circle(25, 20, 12, "F");
      doc.addImage(logoBase64, "PNG", 15, 10, 20, 20);
    }
  } catch {}

  // Company text
  doc.setTextColor(...professionalNavy);
  doc.setFontSize(22);
  doc.setFont("helvetica", "bold");
  doc.text(COMPANY.name, 50, 22);

  doc.setTextColor(...textDark);
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  doc.text(COMPANY.address, 50, 30);
  doc.text(`${COMPANY.phone} | ${COMPANY.email}`, 50, 36);
  doc.text(COMPANY.tp, 50, 42);

  // Order info
  doc.setTextColor(...professionalNavy);
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text(`Order #${receiptData.orderNumber}`, pageWidth - 20, 22, { align: "right" });
  doc.setTextColor(...textDark);
  doc.setFontSize(11);
  doc.setFont("helvetica", "normal");
  doc.text(`Date: ${receiptData.orderDate}`, pageWidth - 20, 32, { align: "right" });

  // ---- Customer info card (now includes business, name, address) ----
  let y = 55;
  const leftX = 15;
  const rightX = pageWidth / 2;
  const lineGap = 5;
  const wrapWidth = (pageWidth / 2) - 25;

  // Prepare left-side lines
  const linesLeft: string[] = [];
  const biz = (receiptData.customerBusinessName || "").trim();
  const person = (receiptData.customerName || "").trim();
  const addr = (receiptData.customerAddress || "").trim();

  if (biz) linesLeft.push(biz);
  if (person) linesLeft.push(person);
  if (addr) {
    const addrLines = doc.splitTextToSize(addr, wrapWidth);
    linesLeft.push(...addrLines.slice(0, 3)); // up to 3 lines
  }

  // Compute dynamic height
  const leftBlockHeight = linesLeft.length > 0 ? (lineGap * linesLeft.length) : 0;
  const minCardHeight = 22;
  const cardHeight = Math.max(minCardHeight, 10 + leftBlockHeight); // base + lines
  doc.setFillColor(...lightGray);
  doc.rect(10, y, pageWidth - 20, cardHeight, "F");

  // Title
  doc.setTextColor(...textDark);
  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Customer Information", leftX, y + 7);

  // Left stack (business → name → address)
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  let ly = y + 14;
  for (const ln of linesLeft) {
    doc.text(ln, leftX, ly);
    ly += lineGap;
  }

  // Right column (email / phone), aligned with the first text row
  const rightY = y + 14;
  if (receiptData.customerEmail) doc.text(`Email: ${receiptData.customerEmail}`, rightX, rightY);
  if (receiptData.customerPhone) doc.text(`Phone: ${receiptData.customerPhone}`, rightX, rightY + lineGap);

  // Next content Y
  return y + cardHeight + 8;
}
