High‑risk duplicates and conflicts to resolve

    Auth/login endpoint defined multiple ways
        server/replitAuth.ts defines GET /api/login for OIDC.
        server/routes-clean.ts, server/routes-consolidated.ts, server/routes_backup.ts.bak, server/routes.ts.backup define POST /api/login for username/password.
        Why risky: If both mount, behavior depends on middleware order; dev/prod can diverge.
        Fix: Gate Replit OIDC behind a feature flag and change its path to /api/oidc/login (and /api/oidc/callback). Keep exactly one POST /api/login.

    Multiple route bundles with overlapping endpoints
        server/routes-clean.ts, server/routes-consolidated.ts, server/routes_backup.ts.bak, server/routes.ts.backup, temp_routes.ts all register overlapping routes (cart, users, products, login, etc.).
        Why risky: Accidental import/merge can double‑bind routes or drift logic.
        Fix: Pick a single routes file; delete or exclude the rest from build. Add a runtime/CI guard that fails if more than one route bundle is imported.

    Admin clear-cart endpoints disagree on method, path, and auth
        server/routes/admin.ts: POST /admin/clear-global-cart (via router base).
        temp_routes.ts and server/routes_backup.ts.bak: DELETE /api/admin/clear-global-cart (requireAuth with admin-user or requireAdmin).
        Client AdminCartController.tsx calls DELETE /api/admin/clear-global-cart.
        Why risky: Method mismatch causes 404s; varying auth checks are a security risk.
        Fix: Standardize on DELETE /api/admin/clear-global-cart with requireAdmin everywhere; remove alternatives; align client.

    Cart clear endpoint duplicated with different methods
        Backups add GET /api/cart/clear while others implement DELETE /api/cart/clear (also referenced in endpoint scripts).
        offlineCartManager.ts uses DELETE /api/cart/clear; scripts (endpoint_sync_fixer.mjs) reference GET.
        Why risky: Confusing client/server behavior; hard to cache/invalidate.
        Fix: Keep only DELETE /api/cart/clear; remove GET variants and any scripts that reintroduce them.

    POS authentication: token names and validation paths diverge
        Token key names: 'pos_auth_token' vs 'posAuthToken' (e.g., client/src/services/printerService.ts uses posAuthToken; most POS code uses pos_auth_token).
        Validation endpoints: PosApp.tsx calls /api/pos/validate-session; PosAuthContext.tsx calls /api/pos/auth/verify.
        Why risky: Tokens not found; sessions “validate” on one path but not the other.
        Fix: Choose ONE token key (pos_auth_token) and ONE verification endpoint (e.g., POST /api/pos/session/verify). Update all references (printerService, PosApp, PosAuthContext, PosLogin) to it.

    Duplicated instore login flows
        client/src/pages/InstoreLogin.tsx vs InstoreLoginNew.tsx vs pos/PosLogin.tsx implement different flows (instore code, OTP, device trust).
        Why risky: Drift in policy and storage (tempAuthToken vs authToken vs pos_auth_token) and edge-case failures.
        Fix: Keep a single instore login UX (prefer the one using pos_auth_token + OTP). Redirect or delete the others.

    Many overlapping auth utilities and token-retrieval logic
        Token retrieval implemented in multiple places: client/src/lib/queryClient.ts, client/src/lib/auth.ts, client/src/pages/AIInvoiceProcessor.tsx, offline hooks/managers, etc.
        Cleanup/backup utilities overlap: authSync.ts, authCleaner.ts, authStateManager.ts, simpleAuthManager.ts.
        Why risky: Inconsistent priority and expiry checks lead to flakey 401s or stale sessions.
        Fix: Create a single getAuthToken() and clearAllAuth() in one module (e.g., lib/authStore.ts). All fetchers and components import these. Remove duplicates.

    “Fixers” and “temp” route scripts can recreate duplicates
        fix_duplicate_endpoints.mjs and endpoint_sync_fixer.mjs programmatically remove/add endpoints and reference GET/DELETE variants.
        temp_routes.ts contains admin-only “nuclear” endpoints (delete-by-pattern, clear carts) overlapping with real routes.
        Why risky: A one-off run can reintroduce duplicates or dev-only endpoints in prod.
        Fix: Delete temp_routes.ts and the fixer scripts or move them to scripts/dev/ and guard with NODE_ENV!=='production'.

    Endpoint registry not enforced and incomplete
        server/endpointRegistry.ts exists but doesn’t reflect all routes or run in registration.
        Why risky: False sense of safety; duplicates slip in.
        Fix: Wrap app.METHOD to call validateEndpoint in dev/test; generate registry from the source of truth during CI to diff for duplicates.

    Admin pages overlap in scope
        Admin.tsx (User Management), EnhancedUserManagement, ManageStaffPage.tsx, AdminStaffManagement.tsx exist concurrently.
        Why risky: Two UIs for same task drift in fields/validation and call different endpoints.
        Fix: Consolidate to /admin/users (one page + components). Remove backups.

    Product management page duplication
        AdminProductManagement-backup.tsx contains logic similar to newer admin product flows.
        Fix: Delete backup or exclude from build; ensure all product mutations use the same apiRequest and endpoints.

    Biometric login endpoints referenced but likely not implemented in main router
        client/src/hooks/useBiometricAuth.ts uses /api/auth/login and /api/auth/biometric-login; these are not present in consolidated route sets.
        Why risky: Dead code paths and future conflicts if implemented with overlapping login behavior.
        Fix: Either implement under a separate namespace (/api/biometric/…) or remove from UI until server is ready.

Quick remediation plan

    Server
        Keep exactly one routes file; delete routes-*.bak, temp_routes.ts and other backups from the build.
        Standardize endpoints and methods:
            POST /api/login (password auth)
            DELETE /api/cart/clear
            DELETE /api/admin/clear-global-cart (requireAdmin)
            POST /api/pos/session/verify (or similar) as the only POS validation path
        Feature-flag Replit OIDC and move to /api/oidc/* paths.
        Enforce endpoint registry validation in dev/CI.

    Client
        Create a single auth helper (getAuthToken, clearAllAuth) and replace all scattered token reads/writes.
        Choose one POS token key: pos_auth_token; update printerService and others.
        Remove InstoreLogin legacy page(s); keep one path and flow.
        Remove backup admin/product pages from the bundle.
