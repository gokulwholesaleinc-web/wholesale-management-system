// receiptGenerator.ts
import { storage } from "../storage";
import { EmailService } from "./emailService";

// ---------- Company Constants ----------
const COMPANY = {
  name: "Gokul Wholesale Inc.",
  address: "1141 W Bryn Mawr Ave, Itasca, IL 60143",
  phone: "(630) 540-9910",
  email: "sales@gokulwholesaleinc.com",
  website: "www.shopgokul.com",
  tp: "TP# 97239"
};

// ---------- Money helpers ----------
const toC = (n: number) => Math.round((n || 0) * 100);
const fromC = (c: number) => c / 100;
const USD = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" });
const fmt$ = (cents: number) => USD.format(fromC(cents));

// ---------- Types ----------
interface ReceiptItemInput {
  name: string;
  sku?: string;
  quantity: number;
  price: number;
  total: number;
  hasIlTobaccoTax?: boolean;
  flatTaxAmount?: number;
  flatTaxName?: string;
  productId?: number;
  isTobaccoProduct?: boolean;
  taxPercentage?: number;
  flatTaxIds?: number[];
}

interface ReceiptData {
  orderId: number;
  orderNumber?: string;
  customerName: string;
  customerBusinessName?: string;
  customerEmail: string;
  customerAddress?: string;
  customerPhone?: string;
  orderDate: string;
  items: ReceiptItemInput[];
  subtotal: number;
  deliveryFee: number;
  total: number;
  paymentMethod?: string;
  orderType: "delivery" | "pickup";
  orderStatus?: string;
  customerNotes?: string;

  // Credit
  creditAccountInfo?: {
    previousBalance: number;
    currentBalance: number;
    creditLimit: number;
    paymentMethod?: string;
  };

  // Loyalty
  loyaltyPointsEarned?: number;

  // Taxes
  hasIlTobaccoProducts?: boolean;
  totalFlatTax?: number;
  flatTaxBreakdown?: Array<{ name: string; amount: number; description?: string }>;
}

// ---------- Receipt Generator ----------
export class ReceiptGenerator {
  private static instance: ReceiptGenerator;
  static getInstance(): ReceiptGenerator {
    if (!ReceiptGenerator.instance) ReceiptGenerator.instance = new ReceiptGenerator();
    return ReceiptGenerator.instance;
  }

  // ---- Credit balance helper ----
  private async calculatePreviousBalance(customerId: string, currentOrderId: number) {
    try {
      const customer = await storage.getUser(customerId);
      const creditLimit = customer?.creditLimit ?? 5000;
      const orders = await storage.getOrdersByUserId(customerId);

      const prevOrders = orders.filter(
        (o: any) =>
          o.status === "completed" &&
          o.id !== currentOrderId &&
          (o.paymentMethod === "on_account" || o.paymentMethod === "credit")
      );

      const previousBalance = prevOrders.reduce((s: number, o: any) => s + (o.total || 0), 0);
      const currentOrder = await storage.getOrderById(currentOrderId);
      const currentOrderTotal = currentOrder?.total || 0;
      const currentBalance = previousBalance + currentOrderTotal;

      return { previousBalance, currentBalance, creditLimit };
    } catch {
      return { previousBalance: 0, currentBalance: 0, creditLimit: 5000 };
    }
  }

  // ---- Main entrypoint ----
  async generateReceiptOnly(orderId: number): Promise<{ success: boolean; pdfBuffer?: Buffer; message?: string }> {
    const order = await storage.getOrderWithItems(orderId);
    if (!order) return { success: false, message: "Order not found" };

    const customer = await storage.getUser(order.userId);
    if (!customer) return { success: false, message: "Customer not found" };

    // Items
    const itemsWithInfo = await Promise.all(
      (order.items || []).map(async (item: any) => {
        const product = item.productId ? await storage.getProductById(item.productId) : null;
        return {
          ...item,
          name: product?.name || item.name,
          sku: product?.sku || "",
          isTobaccoProduct: !!product?.isTobaccoProduct,
          taxPercentage: product?.taxPercentage,
          flatTaxIds: product?.flatTaxIds || []
        };
      })
    );

    const subtotalC = (itemsWithInfo || []).reduce((s, it: any) => s + toC(it.price) * it.quantity, 0);
    const finalTotalC = toC(order.total || fromC(subtotalC));

    const receiptData: ReceiptData = {
      orderId: order.id,
      orderNumber: String(order.id),
      customerName: customer.firstName || customer.username,
      customerBusinessName: customer.company,
      customerEmail: customer.email || "",
      customerAddress: customer.address || "",
      customerPhone: customer.phone || "",
      orderDate: new Date(order.createdAt || new Date()).toLocaleDateString("en-US"),
      orderType: order.orderType || "pickup",
      items: itemsWithInfo,
      subtotal: fromC(subtotalC),
      deliveryFee: order.deliveryFee || 0,
      total: fromC(finalTotalC),
      paymentMethod: order.paymentMethod,
      orderStatus: order.status,
      loyaltyPointsEarned: order.loyaltyPointsEarned
    };

    if (order.paymentMethod === "on_account" || order.paymentMethod === "credit") {
      const creditInfo = await this.calculatePreviousBalance(customer.id, order.id);
      receiptData.creditAccountInfo = {
        previousBalance: creditInfo.previousBalance,
        currentBalance: creditInfo.currentBalance,
        creditLimit: creditInfo.creditLimit,
        paymentMethod: order.paymentMethod
      };
    }

    const pdfBuffer = await this.generateReceiptPDF(receiptData);
    return { success: true, pdfBuffer };
  }

  // ---- PDF Generator ----
  private async generateReceiptPDF(receiptData: ReceiptData): Promise<Buffer> {
    const { jsPDF } = await import("jspdf");
    const fs = await import("fs");
    const path = await import("path");
    const doc = new jsPDF();

    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;

    // Header
    const logoPath = path.join(process.cwd(), "public", "gokul-logo.png");
    if (fs.existsSync(logoPath)) {
      const logoData = fs.readFileSync(logoPath);
      const logoBase64 = `data:image/png;base64,${logoData.toString("base64")}`;
      doc.addImage(logoBase64, "PNG", 15, 10, 20, 20);
    }
    doc.setFontSize(20).text(COMPANY.name, 40, 20);
    doc.setFontSize(10).text(COMPANY.address, 40, 28);
    doc.text(`${COMPANY.phone} | ${COMPANY.email}`, 40, 34);
    doc.text(COMPANY.tp, 40, 40);
    doc.setFontSize(12).text(`Order #${receiptData.orderNumber}`, pageWidth - 20, 20, { align: "right" });
    doc.text(`Date: ${receiptData.orderDate}`, pageWidth - 20, 28, { align: "right" });

    let y = 55;

    // Customer Info
    doc.setFontSize(11).text("Customer Information", 15, y);
    y += 6;
    doc.setFontSize(10);
    doc.text(receiptData.customerName, 15, y);
    y += 5;
    if (receiptData.customerAddress) { doc.text(receiptData.customerAddress, 15, y); y += 5; }
    if (receiptData.customerEmail) doc.text(`Email: ${receiptData.customerEmail}`, pageWidth/2, y-5);
    if (receiptData.customerPhone) doc.text(`Phone: ${receiptData.customerPhone}`, pageWidth/2, y);

    y += 10;

    // Table headers
    doc.setFillColor(52,73,94).rect(10, y, pageWidth - 20, 8, "F");
    doc.setTextColor(255,255,255).setFontSize(10);
    doc.text("Item Description", 15, y+6);
    doc.text("SKU", 95, y+6);
    doc.text("Qty", pageWidth - 65, y+6);
    doc.text("Unit Price", pageWidth - 45, y+6);
    doc.text("Total", pageWidth - 20, y+6, { align: "right" });
    y += 12;

    // Items
    doc.setTextColor(0,0,0);
    for (const it of receiptData.items) {
      const name = doc.splitTextToSize(it.name, 75)[0];
      doc.text(name, 15, y);
      doc.text((it.sku || "N/A").substring(0, 12), 95, y);
      doc.text(String(it.quantity), pageWidth - 65, y);
      doc.text(USD.format(it.price), pageWidth - 45, y);
      doc.text(USD.format(it.total), pageWidth - 20, y, { align: "right" });
      y += 8;
    }

    y += 5;
    doc.text("Items Subtotal:", pageWidth - 90, y);
    doc.text(USD.format(receiptData.subtotal), pageWidth - 20, y, { align: "right" });
    y += 6;
    doc.setFont("helvetica", "bold");
    doc.text("TOTAL:", pageWidth - 90, y);
    doc.text(USD.format(receiptData.total), pageWidth - 20, y, { align: "right" });

    y += 15;

    // Credit section
    if (receiptData.creditAccountInfo) {
      doc.setFontSize(11).setFont("helvetica", "bold").text("Credit Account Summary", 15, y);
      y += 6; doc.setFontSize(10).setFont("helvetica", "normal");
      doc.text(`Previous Balance: ${USD.format(receiptData.creditAccountInfo.previousBalance)}`, 15, y);
      y += 6; doc.text(`This Order: ${USD.format(receiptData.total)}`, 15, y);
      y += 6;
      doc.setFont("helvetica", "bold").text(`TOTAL AMOUNT DUE: ${USD.format(receiptData.creditAccountInfo.previousBalance + receiptData.total)}`, 15, y);
      y += 6; doc.setFont("helvetica", "normal");
      doc.text(`Credit Limit: ${USD.format(receiptData.creditAccountInfo.creditLimit)}`, 15, y);
    }

    // Compliance
    const taxY = pageHeight - 30;
    doc.setFontSize(8).setTextColor(230,126,34).setFont("helvetica", "bold");
    doc.text("45% IL TOBACCO TAX PAID", pageWidth/2, taxY, { align: "center" });

    // Footer
    doc.setFontSize(10).setTextColor(0,0,0);
    doc.text("Thank you for your business!", pageWidth/2, pageHeight - 18, { align: "center" });
    doc.text(COMPANY.website, pageWidth/2, pageHeight - 10, { align: "center" });

    return Buffer.from(doc.output("arraybuffer"));
  }
}

// Singleton
export const receiptGenerator = ReceiptGenerator.getInstance();
