import React, { useEffect, useMemo, useRef, useState } from 'react';

type Item = { sku: string; name: string; qty: number; unit_price: number; line_tax_rate: number; il_otp_cents?: number };

async function api(path: string, init?: RequestInit) {
  const res = await fetch(`/api/pos${path}`, { headers: { 'Content-Type': 'application/json' }, ...init });
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

// Simple offline queue (localStorage)
const QUEUE_KEY = 'pos_queue_v1';
function enqueue(payload: any) {
  const q = JSON.parse(localStorage.getItem(QUEUE_KEY) || '[]');
  q.push(payload);
  localStorage.setItem(QUEUE_KEY, JSON.stringify(q));
}
async function flushQueue() {
  const q = JSON.parse(localStorage.getItem(QUEUE_KEY) || '[]');
  const keep: any[] = [];
  for (const p of q) {
    try { await api('/sale', { method: 'POST', body: JSON.stringify(p) }); }
    catch { keep.push(p); }
  }
  localStorage.setItem(QUEUE_KEY, JSON.stringify(keep));
}

export default function InStorePOS() {
  const [items, setItems] = useState<Item[]>([]);
  const [discount, setDiscount] = useState(0);
  const [subtotal, setSubtotal] = useState(0);
  const [taxOther, setTaxOther] = useState(0);
  const [taxOtp, setTaxOtp] = useState(0);
  const [total, setTotal] = useState(0);
  const [input, setInput] = useState('');
  const [message, setMessage] = useState<string | null>(null);
  const scanRef = useRef<HTMLInputElement>(null);

  // Hotkeys
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'F1') { e.preventDefault(); setItems([]); setDiscount(0); setMessage('New sale'); }
      if (e.key === 'F2') { e.preventDefault(); document.getElementById('pay-btn')?.dispatchEvent(new MouseEvent('click')); }
      if (e.key === 'Delete') { e.preventDefault(); setItems(prev => prev.slice(0, -1)); }
    };
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, []);

  // Recalc totals via API preview
  useEffect(() => {
    const run = async () => {
      const body = { items, discount };
      try {
        const { data } = await api('/preview', { method: 'POST', body: JSON.stringify(body) });
        setSubtotal(data.subtotal); setTaxOther(data.tax_other); setTaxOtp(data.tax_il_otp); setTotal(data.total);
      } catch {}
    };
    run();
  }, [items, discount]);

  // Auto-flush queued sales when online
  useEffect(() => {
    const on = async () => { try { await flushQueue(); setMessage('Queued sales synced'); } catch {} };
    window.addEventListener('online', on);
    on();
    return () => window.removeEventListener('online', on);
  }, []);

  async function addSku(sku: string) {
    try {
      const { data } = await api(`/sku/${encodeURIComponent(sku)}`);
      setItems(prev => {
        const i = prev.findIndex(p => p.sku === data.sku);
        if (i >= 0) { const cp = [...prev]; cp[i] = { ...cp[i], qty: cp[i].qty + 1 }; return cp; }
        return [...prev, { sku: data.sku, name: data.name, qty: 1, unit_price: data.unit_price, line_tax_rate: data.line_tax_rate, il_otp_cents: undefined }];
      });
      setMessage(null);
    } catch {
      setMessage(`SKU ${sku} not found`);
    }
  }

  function onScanKey(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === 'Enter' && input.trim()) {
      addSku(input.trim());
      setInput('');
    }
  }

  async function pay(type: 'CASH'|'CARD') {
    const payload = {
      store_id: process.env.POS_STORE_ID || 'ITASCA',
      register_id: process.env.POS_REGISTER_ID || 'REG-01',
      cashier_id: 'CASHIER-1',
      items,
      discount,
      tenders: [{ type, amount: total }],
      note: ''
    };
    try {
      const { data } = await api('/sale', { method: 'POST', body: JSON.stringify(payload) });
      // Try to print via bridge if available
      // @ts-ignore
      if (window.MMFB?.printReceiptText) {
        // build on server ideally; quick client call
        const lines = [
          'GOKUL WHOLESALE',
          '1141 W Bryn Mawr Ave, Itasca IL 60143',
          'Phone: 630-540-9910',
          'www.shopgokul.com',
          '------------------------------------------',
          `SALE ${data.id}`,
          new Date(data.created_at).toLocaleString(),
          '------------------------------------------',
          ...data.items.flatMap((it:any)=>[
            `${it.name}`,
            `  ${it.sku}  x${it.qty}  @$${(it.unit_price/100).toFixed(2)}   $${((it.unit_price*it.qty)/100).toFixed(2)}`
          ]),
          '------------------------------------------',
          `Subtotal                 $${(data.subtotal/100).toFixed(2)}`,
          `45% IL TOBACCO TAX PAID  $${(data.tax_il_otp/100).toFixed(2)}`,
          `Other Taxes              $${(data.tax_other/100).toFixed(2)}`,
          `Discount                -$${(data.discount/100).toFixed(2)}`,
          `TOTAL                    $${(data.total/100).toFixed(2)}`,
        ];
        // @ts-ignore
        window.MMFB.printReceiptText(lines.join('\n'));
      }
      setItems([]); setDiscount(0); setMessage(`Sale ${data.id} completed`);
    } catch (err:any) {
      // offline or server error → queue
      enqueue(payload);
      setItems([]); setDiscount(0);
      setMessage('No network; queued sale for sync');
    }
  }

  const balanceColor = total > 0 ? '#111827' : '#ef4444';

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: 12, padding: 12 }}>
      <div>
        <h2 style={{ fontSize: 22, fontWeight: 800 }}>In-Store POS</h2>
        <div style={{ display:'flex', gap:8, margin:'8px 0' }}>
          <input
            ref={scanRef}
            value={input}
            onChange={e=>setInput(e.target.value)}
            onKeyDown={onScanKey}
            placeholder="Scan barcode or type SKU then Enter"
            autoFocus
            style={{ flex:1, padding:'10px 12px', border:'1px solid #e5e7eb', borderRadius:8 }}
          />
          <button onClick={()=>{ if(input.trim()) { addSku(input.trim()); setInput(''); } }}
            style={{ padding:'10px 12px', borderRadius:8, border:'1px solid #e5e7eb' }}>Add</button>
        </div>

        <div style={{ border:'1px solid #e5e7eb', borderRadius:10, overflow:'hidden' }}>
          <div style={{ display:'grid', gridTemplateColumns:'1fr 70px 100px 60px', fontWeight:700, background:'#f9fafb', padding:'8px 10px' }}>
            <div>Item</div><div>Qty</div><div>Unit</div><div></div>
          </div>
          {items.map((it,idx)=>(
            <div key={idx} style={{ display:'grid', gridTemplateColumns:'1fr 70px 100px 60px', padding:'8px 10px', borderTop:'1px solid #f3f4f6' }}>
              <div>
                <div style={{ fontWeight:600 }}>{it.name}</div>
                <div style={{ fontSize:12, color:'#6b7280' }}>{it.sku}</div>
              </div>
              <input type="number" min={1} value={it.qty} onChange={e=>{
                const qty = Math.max(1, parseInt(e.target.value||'1',10));
                setItems(prev=>prev.map((p,i)=> i===idx ? { ...p, qty } : p));
              }} style={{ width:60, padding:'6px 8px', border:'1px solid #e5e7eb', borderRadius:8 }}/>
              <div>${(it.unit_price/100).toFixed(2)}</div>
              <button onClick={()=> setItems(prev=> prev.filter((_,i)=>i!==idx))}
                style={{ border:'1px solid #e5e7eb', borderRadius:8, padding:'4px 8px' }}>Del</button>
            </div>
          ))}
          {!items.length && <div style={{ padding:12, color:'#6b7280' }}>Scan items to begin a sale (F1 new sale).</div>}
        </div>
      </div>

      <div>
        <div style={{ border:'1px solid #e5e7eb', borderRadius:10, padding:12 }}>
          <div style={{ display:'grid', gridTemplateColumns:'1fr auto', gap:6 }}>
            <div>Subtotal</div><div>${(subtotal/100).toFixed(2)}</div>
            <div>45% IL TOBACCO TAX PAID</div><div>${(taxOtp/100).toFixed(2)}</div>
            <div>Other Taxes</div><div>${(taxOther/100).toFixed(2)}</div>
            <div>Discount</div>
            <div>
              <input type="number" min={0} value={discount} onChange={e=>setDiscount(Math.max(0, parseInt(e.target.value||'0',10)))} style={{ width:100, padding:'6px 8px', border:'1px solid #e5e7eb', borderRadius:8 }}/>
            </div>
            <div style={{ fontWeight:800 }}>TOTAL</div><div style={{ fontWeight:800, color: balanceColor }}>${(total/100).toFixed(2)}</div>
          </div>

          <div style={{ display:'flex', gap:8, marginTop:12 }}>
            <button id="pay-btn" onClick={()=>pay('CASH')} style={{ flex:1, padding:'12px', borderRadius:10, background:'#111827', color:'white' }}>Cash (F2)</button>
            <button onClick={()=>pay('CARD')} style={{ flex:1, padding:'12px', borderRadius:10, border:'1px solid #e5e7eb' }}>Card</button>
          </div>
          <div style={{ marginTop:8, fontSize:12, color:'#6b7280' }}>
            F1 New Sale · F2 Pay · Delete remove last line
          </div>
        </div>

        {message && <div style={{ marginTop:8, padding:10, background:'#f3f4f6', border:'1px solid #e5e7eb', borderRadius:8 }}>{message}</div>}
      </div>
    </div>
  );
}
