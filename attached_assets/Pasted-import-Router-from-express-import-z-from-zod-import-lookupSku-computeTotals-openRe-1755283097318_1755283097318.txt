import { Router } from 'express';
import { z } from 'zod';
import { lookupSku, computeTotals, openRegister, closeRegister, createSale, POS_DB } from '../services/pos';

const r = Router();

// SKU lookup
r.get('/sku/:sku', async (req, res) => {
  const item = await lookupSku(req.params.sku);
  if (!item) return res.status(404).json({ error: 'Not found' });
  res.json({ data: item });
});

// Register open/close
r.post('/register/open', (req, res) => {
  const schema = z.object({ store_id: z.string(), name: z.string(), opening_float_cents: z.number().int().nonnegative() });
  const { store_id, name, opening_float_cents } = schema.parse(req.body);
  res.json({ data: openRegister(store_id, name, opening_float_cents) });
});

r.post('/register/close', (req, res) => {
  const schema = z.object({ id: z.string() });
  const { id } = schema.parse(req.body);
  res.json({ data: closeRegister(id) });
});

// Preview totals (no tender yet)
r.post('/preview', (req, res) => {
  const schema = z.object({
    items: z.array(z.object({
      sku: z.string(),
      name: z.string(),
      qty: z.number().int().positive(),
      unit_price: z.number().int().nonnegative(),
      line_tax_rate: z.number().min(0).max(1),
      il_otp_cents: z.number().int().nonnegative().optional()
    })),
    discount: z.number().int().nonnegative().default(0)
  });
  const { items, discount } = schema.parse(req.body);
  res.json({ data: computeTotals(items, discount) });
});

// Finalize sale
r.post('/sale', async (req, res) => {
  const schema = z.object({
    store_id: z.string(),
    register_id: z.string(),
    cashier_id: z.string(),
    items: z.array(z.object({
      sku: z.string(),
      name: z.string(),
      qty: z.number().int().positive(),
      unit_price: z.number().int().nonnegative(),
      line_tax_rate: z.number().min(0).max(1),
      il_otp_cents: z.number().int().nonnegative().optional()
    })),
    discount: z.number().int().nonnegative().default(0),
    tenders: z.array(z.object({
      type: z.enum(['CASH','CARD','OTHER']),
      amount: z.number().int().nonnegative(),
      ref: z.string().optional()
    })),
    customer_id: z.string().optional(),
    note: z.string().optional()
  });
  const body = schema.parse(req.body);
  const { subtotal, tax_il_otp, tax_other, total } = computeTotals(body.items, body.discount);
  const sale = await createSale({
    store_id: body.store_id,
    register_id: body.register_id,
    cashier_id: body.cashier_id,
    items: body.items,
    subtotal, tax_il_otp, tax_other,
    discount: body.discount,
    total,
    tenders: body.tenders,
    customer_id: body.customer_id,
    note: body.note
  });
  res.json({ data: sale });
});

// Simple X/Z report endpoints (stubbed)
r.get('/sales', (req, res) => {
  const from = req.query.from ? new Date(String(req.query.from)) : new Date(Date.now() - 86400000);
  const to = req.query.to ? new Date(String(req.query.to)) : new Date();
  const rows = Array.from(POS_DB.sales.values()).filter(s => {
    const t = new Date(s.created_at).getTime();
    return t >= +from && t <= +to;
  });
  res.json({ data: rows });
});

export default r;
